# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DnsZoneResponseInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extattrs': 'DnsZoneResponseInnerExtattrs',
        'fqdn': 'str',
        'grid_primary': 'list[DnsZoneResponseInnerGridPrimary]',
        'grid_secondaries': 'list[DnsZoneResponseInnerGridPrimary]',
        'prefix': 'str',
        'view': 'str',
        'zone_format': 'str'
    }

    attribute_map = {
        'extattrs': 'extattrs',
        'fqdn': 'fqdn',
        'grid_primary': 'grid_primary',
        'grid_secondaries': 'grid_secondaries',
        'prefix': 'prefix',
        'view': 'view',
        'zone_format': 'zone_format'
    }

    def __init__(self, extattrs=None, fqdn=None, grid_primary=None, grid_secondaries=None, prefix=None, view=None, zone_format=None):  # noqa: E501
        """DnsZoneResponseInner - a model defined in Swagger"""  # noqa: E501

        self._extattrs = None
        self._fqdn = None
        self._grid_primary = None
        self._grid_secondaries = None
        self._prefix = None
        self._view = None
        self._zone_format = None
        self.discriminator = None

        if extattrs is not None:
            self.extattrs = extattrs
        if fqdn is not None:
            self.fqdn = fqdn
        if grid_primary is not None:
            self.grid_primary = grid_primary
        if grid_secondaries is not None:
            self.grid_secondaries = grid_secondaries
        if prefix is not None:
            self.prefix = prefix
        if view is not None:
            self.view = view
        if zone_format is not None:
            self.zone_format = zone_format

    @property
    def extattrs(self):
        """Gets the extattrs of this DnsZoneResponseInner.  # noqa: E501


        :return: The extattrs of this DnsZoneResponseInner.  # noqa: E501
        :rtype: DnsZoneResponseInnerExtattrs
        """
        return self._extattrs

    @extattrs.setter
    def extattrs(self, extattrs):
        """Sets the extattrs of this DnsZoneResponseInner.


        :param extattrs: The extattrs of this DnsZoneResponseInner.  # noqa: E501
        :type: DnsZoneResponseInnerExtattrs
        """

        self._extattrs = extattrs

    @property
    def fqdn(self):
        """Gets the fqdn of this DnsZoneResponseInner.  # noqa: E501


        :return: The fqdn of this DnsZoneResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this DnsZoneResponseInner.


        :param fqdn: The fqdn of this DnsZoneResponseInner.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def grid_primary(self):
        """Gets the grid_primary of this DnsZoneResponseInner.  # noqa: E501


        :return: The grid_primary of this DnsZoneResponseInner.  # noqa: E501
        :rtype: list[DnsZoneResponseInnerGridPrimary]
        """
        return self._grid_primary

    @grid_primary.setter
    def grid_primary(self, grid_primary):
        """Sets the grid_primary of this DnsZoneResponseInner.


        :param grid_primary: The grid_primary of this DnsZoneResponseInner.  # noqa: E501
        :type: list[DnsZoneResponseInnerGridPrimary]
        """

        self._grid_primary = grid_primary

    @property
    def grid_secondaries(self):
        """Gets the grid_secondaries of this DnsZoneResponseInner.  # noqa: E501


        :return: The grid_secondaries of this DnsZoneResponseInner.  # noqa: E501
        :rtype: list[DnsZoneResponseInnerGridPrimary]
        """
        return self._grid_secondaries

    @grid_secondaries.setter
    def grid_secondaries(self, grid_secondaries):
        """Sets the grid_secondaries of this DnsZoneResponseInner.


        :param grid_secondaries: The grid_secondaries of this DnsZoneResponseInner.  # noqa: E501
        :type: list[DnsZoneResponseInnerGridPrimary]
        """

        self._grid_secondaries = grid_secondaries

    @property
    def prefix(self):
        """Gets the prefix of this DnsZoneResponseInner.  # noqa: E501


        :return: The prefix of this DnsZoneResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this DnsZoneResponseInner.


        :param prefix: The prefix of this DnsZoneResponseInner.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def view(self):
        """Gets the view of this DnsZoneResponseInner.  # noqa: E501


        :return: The view of this DnsZoneResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this DnsZoneResponseInner.


        :param view: The view of this DnsZoneResponseInner.  # noqa: E501
        :type: str
        """

        self._view = view

    @property
    def zone_format(self):
        """Gets the zone_format of this DnsZoneResponseInner.  # noqa: E501


        :return: The zone_format of this DnsZoneResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._zone_format

    @zone_format.setter
    def zone_format(self, zone_format):
        """Sets the zone_format of this DnsZoneResponseInner.


        :param zone_format: The zone_format of this DnsZoneResponseInner.  # noqa: E501
        :type: str
        """

        self._zone_format = zone_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DnsZoneResponseInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DnsZoneResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
