# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceInterfaceAlarmObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_name': 'str',
        'guest_port_status': 'bool',
        'hypervisor_device_name': 'str',
        'hypervisor_port': 'str',
        'increase_percent': 'int',
        'is_guest': 'bool',
        'is_hypervisor': 'bool',
        'mac_address': 'str',
        'metric': 'str',
        'new_value': 'str',
        'old_value': 'str',
        'port': 'str',
        'sample_delta': 'int'
    }

    attribute_map = {
        'device_name': 'device_name',
        'guest_port_status': 'guest_port_status',
        'hypervisor_device_name': 'hypervisor_device_name',
        'hypervisor_port': 'hypervisor_port',
        'increase_percent': 'increase_percent',
        'is_guest': 'is_guest',
        'is_hypervisor': 'is_hypervisor',
        'mac_address': 'mac_address',
        'metric': 'metric',
        'new_value': 'new_value',
        'old_value': 'old_value',
        'port': 'port',
        'sample_delta': 'sample_delta'
    }

    def __init__(self, device_name=None, guest_port_status=None, hypervisor_device_name=None, hypervisor_port=None, increase_percent=None, is_guest=None, is_hypervisor=None, mac_address=None, metric=None, new_value=None, old_value=None, port=None, sample_delta=None):  # noqa: E501
        """DeviceInterfaceAlarmObject - a model defined in Swagger"""  # noqa: E501

        self._device_name = None
        self._guest_port_status = None
        self._hypervisor_device_name = None
        self._hypervisor_port = None
        self._increase_percent = None
        self._is_guest = None
        self._is_hypervisor = None
        self._mac_address = None
        self._metric = None
        self._new_value = None
        self._old_value = None
        self._port = None
        self._sample_delta = None
        self.discriminator = None

        if device_name is not None:
            self.device_name = device_name
        if guest_port_status is not None:
            self.guest_port_status = guest_port_status
        if hypervisor_device_name is not None:
            self.hypervisor_device_name = hypervisor_device_name
        if hypervisor_port is not None:
            self.hypervisor_port = hypervisor_port
        if increase_percent is not None:
            self.increase_percent = increase_percent
        if is_guest is not None:
            self.is_guest = is_guest
        if is_hypervisor is not None:
            self.is_hypervisor = is_hypervisor
        if mac_address is not None:
            self.mac_address = mac_address
        if metric is not None:
            self.metric = metric
        if new_value is not None:
            self.new_value = new_value
        if old_value is not None:
            self.old_value = old_value
        if port is not None:
            self.port = port
        if sample_delta is not None:
            self.sample_delta = sample_delta

    @property
    def device_name(self):
        """Gets the device_name of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The device_name of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DeviceInterfaceAlarmObject.


        :param device_name: The device_name of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def guest_port_status(self):
        """Gets the guest_port_status of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The guest_port_status of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: bool
        """
        return self._guest_port_status

    @guest_port_status.setter
    def guest_port_status(self, guest_port_status):
        """Sets the guest_port_status of this DeviceInterfaceAlarmObject.


        :param guest_port_status: The guest_port_status of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: bool
        """

        self._guest_port_status = guest_port_status

    @property
    def hypervisor_device_name(self):
        """Gets the hypervisor_device_name of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The hypervisor_device_name of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_device_name

    @hypervisor_device_name.setter
    def hypervisor_device_name(self, hypervisor_device_name):
        """Sets the hypervisor_device_name of this DeviceInterfaceAlarmObject.


        :param hypervisor_device_name: The hypervisor_device_name of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: str
        """

        self._hypervisor_device_name = hypervisor_device_name

    @property
    def hypervisor_port(self):
        """Gets the hypervisor_port of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The hypervisor_port of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_port

    @hypervisor_port.setter
    def hypervisor_port(self, hypervisor_port):
        """Sets the hypervisor_port of this DeviceInterfaceAlarmObject.


        :param hypervisor_port: The hypervisor_port of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: str
        """

        self._hypervisor_port = hypervisor_port

    @property
    def increase_percent(self):
        """Gets the increase_percent of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The increase_percent of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: int
        """
        return self._increase_percent

    @increase_percent.setter
    def increase_percent(self, increase_percent):
        """Sets the increase_percent of this DeviceInterfaceAlarmObject.


        :param increase_percent: The increase_percent of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: int
        """

        self._increase_percent = increase_percent

    @property
    def is_guest(self):
        """Gets the is_guest of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The is_guest of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_guest

    @is_guest.setter
    def is_guest(self, is_guest):
        """Sets the is_guest of this DeviceInterfaceAlarmObject.


        :param is_guest: The is_guest of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: bool
        """

        self._is_guest = is_guest

    @property
    def is_hypervisor(self):
        """Gets the is_hypervisor of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The is_hypervisor of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_hypervisor

    @is_hypervisor.setter
    def is_hypervisor(self, is_hypervisor):
        """Sets the is_hypervisor of this DeviceInterfaceAlarmObject.


        :param is_hypervisor: The is_hypervisor of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: bool
        """

        self._is_hypervisor = is_hypervisor

    @property
    def mac_address(self):
        """Gets the mac_address of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The mac_address of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this DeviceInterfaceAlarmObject.


        :param mac_address: The mac_address of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def metric(self):
        """Gets the metric of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The metric of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this DeviceInterfaceAlarmObject.


        :param metric: The metric of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: str
        """

        self._metric = metric

    @property
    def new_value(self):
        """Gets the new_value of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The new_value of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this DeviceInterfaceAlarmObject.


        :param new_value: The new_value of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: str
        """

        self._new_value = new_value

    @property
    def old_value(self):
        """Gets the old_value of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The old_value of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this DeviceInterfaceAlarmObject.


        :param old_value: The old_value of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: str
        """

        self._old_value = old_value

    @property
    def port(self):
        """Gets the port of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The port of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DeviceInterfaceAlarmObject.


        :param port: The port of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def sample_delta(self):
        """Gets the sample_delta of this DeviceInterfaceAlarmObject.  # noqa: E501


        :return: The sample_delta of this DeviceInterfaceAlarmObject.  # noqa: E501
        :rtype: int
        """
        return self._sample_delta

    @sample_delta.setter
    def sample_delta(self, sample_delta):
        """Sets the sample_delta of this DeviceInterfaceAlarmObject.


        :param sample_delta: The sample_delta of this DeviceInterfaceAlarmObject.  # noqa: E501
        :type: int
        """

        self._sample_delta = sample_delta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceInterfaceAlarmObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInterfaceAlarmObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
