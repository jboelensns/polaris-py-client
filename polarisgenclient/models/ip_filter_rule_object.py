# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IpFilterRuleObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_filter_id': 'str',
        'is_enabled': 'bool',
        'is_v4': 'bool',
        'is_v6': 'bool',
        'prefix': 'str',
        'prefix_len_eq': 'int',
        'prefix_len_ge': 'int',
        'prefix_len_le': 'int',
        'seq': 'int'
    }

    attribute_map = {
        'ip_filter_id': 'ip_filter_id',
        'is_enabled': 'is_enabled',
        'is_v4': 'is_v4',
        'is_v6': 'is_v6',
        'prefix': 'prefix',
        'prefix_len_eq': 'prefix_len_eq',
        'prefix_len_ge': 'prefix_len_ge',
        'prefix_len_le': 'prefix_len_le',
        'seq': 'seq'
    }

    def __init__(self, ip_filter_id=None, is_enabled=None, is_v4=None, is_v6=None, prefix=None, prefix_len_eq=None, prefix_len_ge=None, prefix_len_le=None, seq=None):  # noqa: E501
        """IpFilterRuleObject - a model defined in Swagger"""  # noqa: E501

        self._ip_filter_id = None
        self._is_enabled = None
        self._is_v4 = None
        self._is_v6 = None
        self._prefix = None
        self._prefix_len_eq = None
        self._prefix_len_ge = None
        self._prefix_len_le = None
        self._seq = None
        self.discriminator = None

        self.ip_filter_id = ip_filter_id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_v4 is not None:
            self.is_v4 = is_v4
        if is_v6 is not None:
            self.is_v6 = is_v6
        self.prefix = prefix
        if prefix_len_eq is not None:
            self.prefix_len_eq = prefix_len_eq
        if prefix_len_ge is not None:
            self.prefix_len_ge = prefix_len_ge
        if prefix_len_le is not None:
            self.prefix_len_le = prefix_len_le
        self.seq = seq

    @property
    def ip_filter_id(self):
        """Gets the ip_filter_id of this IpFilterRuleObject.  # noqa: E501

        UUID1 string  # noqa: E501

        :return: The ip_filter_id of this IpFilterRuleObject.  # noqa: E501
        :rtype: str
        """
        return self._ip_filter_id

    @ip_filter_id.setter
    def ip_filter_id(self, ip_filter_id):
        """Sets the ip_filter_id of this IpFilterRuleObject.

        UUID1 string  # noqa: E501

        :param ip_filter_id: The ip_filter_id of this IpFilterRuleObject.  # noqa: E501
        :type: str
        """
        if ip_filter_id is None:
            raise ValueError("Invalid value for `ip_filter_id`, must not be `None`")  # noqa: E501

        self._ip_filter_id = ip_filter_id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this IpFilterRuleObject.  # noqa: E501


        :return: The is_enabled of this IpFilterRuleObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this IpFilterRuleObject.


        :param is_enabled: The is_enabled of this IpFilterRuleObject.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_v4(self):
        """Gets the is_v4 of this IpFilterRuleObject.  # noqa: E501


        :return: The is_v4 of this IpFilterRuleObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_v4

    @is_v4.setter
    def is_v4(self, is_v4):
        """Sets the is_v4 of this IpFilterRuleObject.


        :param is_v4: The is_v4 of this IpFilterRuleObject.  # noqa: E501
        :type: bool
        """

        self._is_v4 = is_v4

    @property
    def is_v6(self):
        """Gets the is_v6 of this IpFilterRuleObject.  # noqa: E501


        :return: The is_v6 of this IpFilterRuleObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_v6

    @is_v6.setter
    def is_v6(self, is_v6):
        """Sets the is_v6 of this IpFilterRuleObject.


        :param is_v6: The is_v6 of this IpFilterRuleObject.  # noqa: E501
        :type: bool
        """

        self._is_v6 = is_v6

    @property
    def prefix(self):
        """Gets the prefix of this IpFilterRuleObject.  # noqa: E501


        :return: The prefix of this IpFilterRuleObject.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this IpFilterRuleObject.


        :param prefix: The prefix of this IpFilterRuleObject.  # noqa: E501
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def prefix_len_eq(self):
        """Gets the prefix_len_eq of this IpFilterRuleObject.  # noqa: E501


        :return: The prefix_len_eq of this IpFilterRuleObject.  # noqa: E501
        :rtype: int
        """
        return self._prefix_len_eq

    @prefix_len_eq.setter
    def prefix_len_eq(self, prefix_len_eq):
        """Sets the prefix_len_eq of this IpFilterRuleObject.


        :param prefix_len_eq: The prefix_len_eq of this IpFilterRuleObject.  # noqa: E501
        :type: int
        """

        self._prefix_len_eq = prefix_len_eq

    @property
    def prefix_len_ge(self):
        """Gets the prefix_len_ge of this IpFilterRuleObject.  # noqa: E501


        :return: The prefix_len_ge of this IpFilterRuleObject.  # noqa: E501
        :rtype: int
        """
        return self._prefix_len_ge

    @prefix_len_ge.setter
    def prefix_len_ge(self, prefix_len_ge):
        """Sets the prefix_len_ge of this IpFilterRuleObject.


        :param prefix_len_ge: The prefix_len_ge of this IpFilterRuleObject.  # noqa: E501
        :type: int
        """

        self._prefix_len_ge = prefix_len_ge

    @property
    def prefix_len_le(self):
        """Gets the prefix_len_le of this IpFilterRuleObject.  # noqa: E501


        :return: The prefix_len_le of this IpFilterRuleObject.  # noqa: E501
        :rtype: int
        """
        return self._prefix_len_le

    @prefix_len_le.setter
    def prefix_len_le(self, prefix_len_le):
        """Sets the prefix_len_le of this IpFilterRuleObject.


        :param prefix_len_le: The prefix_len_le of this IpFilterRuleObject.  # noqa: E501
        :type: int
        """

        self._prefix_len_le = prefix_len_le

    @property
    def seq(self):
        """Gets the seq of this IpFilterRuleObject.  # noqa: E501


        :return: The seq of this IpFilterRuleObject.  # noqa: E501
        :rtype: int
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this IpFilterRuleObject.


        :param seq: The seq of this IpFilterRuleObject.  # noqa: E501
        :type: int
        """
        if seq is None:
            raise ValueError("Invalid value for `seq`, must not be `None`")  # noqa: E501

        self._seq = seq

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpFilterRuleObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpFilterRuleObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
