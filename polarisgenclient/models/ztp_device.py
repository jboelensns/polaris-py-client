# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ZtpDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_enabled': 'bool',
        'management_ip_address': 'str',
        'model_name': 'str',
        'name': 'str',
        'os': 'str',
        'os_version_intended': 'str',
        'os_version_operating': 'str',
        'serial_number': 'str',
        'system_mac_address': 'str',
        'tacacs_ctx': 'str'
    }

    attribute_map = {
        'is_enabled': 'is_enabled',
        'management_ip_address': 'management_ip_address',
        'model_name': 'model_name',
        'name': 'name',
        'os': 'os',
        'os_version_intended': 'os_version_intended',
        'os_version_operating': 'os_version_operating',
        'serial_number': 'serial_number',
        'system_mac_address': 'system_mac_address',
        'tacacs_ctx': 'tacacs_ctx'
    }

    def __init__(self, is_enabled=None, management_ip_address=None, model_name=None, name=None, os=None, os_version_intended=None, os_version_operating=None, serial_number=None, system_mac_address=None, tacacs_ctx=None):  # noqa: E501
        """ZtpDevice - a model defined in Swagger"""  # noqa: E501

        self._is_enabled = None
        self._management_ip_address = None
        self._model_name = None
        self._name = None
        self._os = None
        self._os_version_intended = None
        self._os_version_operating = None
        self._serial_number = None
        self._system_mac_address = None
        self._tacacs_ctx = None
        self.discriminator = None

        if is_enabled is not None:
            self.is_enabled = is_enabled
        if management_ip_address is not None:
            self.management_ip_address = management_ip_address
        if model_name is not None:
            self.model_name = model_name
        if name is not None:
            self.name = name
        if os is not None:
            self.os = os
        if os_version_intended is not None:
            self.os_version_intended = os_version_intended
        if os_version_operating is not None:
            self.os_version_operating = os_version_operating
        self.serial_number = serial_number
        if system_mac_address is not None:
            self.system_mac_address = system_mac_address
        if tacacs_ctx is not None:
            self.tacacs_ctx = tacacs_ctx

    @property
    def is_enabled(self):
        """Gets the is_enabled of this ZtpDevice.  # noqa: E501


        :return: The is_enabled of this ZtpDevice.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this ZtpDevice.


        :param is_enabled: The is_enabled of this ZtpDevice.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def management_ip_address(self):
        """Gets the management_ip_address of this ZtpDevice.  # noqa: E501


        :return: The management_ip_address of this ZtpDevice.  # noqa: E501
        :rtype: str
        """
        return self._management_ip_address

    @management_ip_address.setter
    def management_ip_address(self, management_ip_address):
        """Sets the management_ip_address of this ZtpDevice.


        :param management_ip_address: The management_ip_address of this ZtpDevice.  # noqa: E501
        :type: str
        """

        self._management_ip_address = management_ip_address

    @property
    def model_name(self):
        """Gets the model_name of this ZtpDevice.  # noqa: E501


        :return: The model_name of this ZtpDevice.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this ZtpDevice.


        :param model_name: The model_name of this ZtpDevice.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def name(self):
        """Gets the name of this ZtpDevice.  # noqa: E501


        :return: The name of this ZtpDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ZtpDevice.


        :param name: The name of this ZtpDevice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def os(self):
        """Gets the os of this ZtpDevice.  # noqa: E501


        :return: The os of this ZtpDevice.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this ZtpDevice.


        :param os: The os of this ZtpDevice.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def os_version_intended(self):
        """Gets the os_version_intended of this ZtpDevice.  # noqa: E501


        :return: The os_version_intended of this ZtpDevice.  # noqa: E501
        :rtype: str
        """
        return self._os_version_intended

    @os_version_intended.setter
    def os_version_intended(self, os_version_intended):
        """Sets the os_version_intended of this ZtpDevice.


        :param os_version_intended: The os_version_intended of this ZtpDevice.  # noqa: E501
        :type: str
        """

        self._os_version_intended = os_version_intended

    @property
    def os_version_operating(self):
        """Gets the os_version_operating of this ZtpDevice.  # noqa: E501


        :return: The os_version_operating of this ZtpDevice.  # noqa: E501
        :rtype: str
        """
        return self._os_version_operating

    @os_version_operating.setter
    def os_version_operating(self, os_version_operating):
        """Sets the os_version_operating of this ZtpDevice.


        :param os_version_operating: The os_version_operating of this ZtpDevice.  # noqa: E501
        :type: str
        """

        self._os_version_operating = os_version_operating

    @property
    def serial_number(self):
        """Gets the serial_number of this ZtpDevice.  # noqa: E501


        :return: The serial_number of this ZtpDevice.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ZtpDevice.


        :param serial_number: The serial_number of this ZtpDevice.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def system_mac_address(self):
        """Gets the system_mac_address of this ZtpDevice.  # noqa: E501


        :return: The system_mac_address of this ZtpDevice.  # noqa: E501
        :rtype: str
        """
        return self._system_mac_address

    @system_mac_address.setter
    def system_mac_address(self, system_mac_address):
        """Sets the system_mac_address of this ZtpDevice.


        :param system_mac_address: The system_mac_address of this ZtpDevice.  # noqa: E501
        :type: str
        """

        self._system_mac_address = system_mac_address

    @property
    def tacacs_ctx(self):
        """Gets the tacacs_ctx of this ZtpDevice.  # noqa: E501


        :return: The tacacs_ctx of this ZtpDevice.  # noqa: E501
        :rtype: str
        """
        return self._tacacs_ctx

    @tacacs_ctx.setter
    def tacacs_ctx(self, tacacs_ctx):
        """Sets the tacacs_ctx of this ZtpDevice.


        :param tacacs_ctx: The tacacs_ctx of this ZtpDevice.  # noqa: E501
        :type: str
        """

        self._tacacs_ctx = tacacs_ctx

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZtpDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZtpDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
