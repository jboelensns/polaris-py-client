# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Pop1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'airport_code': 'str',
        'country_code': 'str',
        'description': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'name': 'str',
        'status': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'address': 'address',
        'airport_code': 'airport_code',
        'country_code': 'country_code',
        'description': 'description',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'name': 'name',
        'status': 'status',
        'vendor': 'vendor'
    }

    def __init__(self, address=None, airport_code=None, country_code=None, description=None, latitude=None, longitude=None, name=None, status=None, vendor=None):  # noqa: E501
        """Pop1 - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._airport_code = None
        self._country_code = None
        self._description = None
        self._latitude = None
        self._longitude = None
        self._name = None
        self._status = None
        self._vendor = None
        self.discriminator = None

        if address is not None:
            self.address = address
        self.airport_code = airport_code
        self.country_code = country_code
        if description is not None:
            self.description = description
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        self.name = name
        self.status = status
        if vendor is not None:
            self.vendor = vendor

    @property
    def address(self):
        """Gets the address of this Pop1.  # noqa: E501


        :return: The address of this Pop1.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Pop1.


        :param address: The address of this Pop1.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def airport_code(self):
        """Gets the airport_code of this Pop1.  # noqa: E501


        :return: The airport_code of this Pop1.  # noqa: E501
        :rtype: str
        """
        return self._airport_code

    @airport_code.setter
    def airport_code(self, airport_code):
        """Sets the airport_code of this Pop1.


        :param airport_code: The airport_code of this Pop1.  # noqa: E501
        :type: str
        """
        if airport_code is None:
            raise ValueError("Invalid value for `airport_code`, must not be `None`")  # noqa: E501

        self._airport_code = airport_code

    @property
    def country_code(self):
        """Gets the country_code of this Pop1.  # noqa: E501


        :return: The country_code of this Pop1.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Pop1.


        :param country_code: The country_code of this Pop1.  # noqa: E501
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def description(self):
        """Gets the description of this Pop1.  # noqa: E501


        :return: The description of this Pop1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Pop1.


        :param description: The description of this Pop1.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def latitude(self):
        """Gets the latitude of this Pop1.  # noqa: E501


        :return: The latitude of this Pop1.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Pop1.


        :param latitude: The latitude of this Pop1.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Pop1.  # noqa: E501


        :return: The longitude of this Pop1.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Pop1.


        :param longitude: The longitude of this Pop1.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this Pop1.  # noqa: E501


        :return: The name of this Pop1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pop1.


        :param name: The name of this Pop1.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this Pop1.  # noqa: E501


        :return: The status of this Pop1.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Pop1.


        :param status: The status of this Pop1.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def vendor(self):
        """Gets the vendor of this Pop1.  # noqa: E501


        :return: The vendor of this Pop1.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Pop1.


        :param vendor: The vendor of this Pop1.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pop1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pop1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
