# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HostBgpNeighborPrefixObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application': 'str',
        'communities': 'list[object]',
        'description': 'str',
        'device_name': 'str',
        'is_enabled': 'bool',
        'local_pref': 'int',
        'med': 'int',
        'neighbor_id': 'str',
        'next_hop': 'str',
        'origin': 'str',
        'prefix': 'str'
    }

    attribute_map = {
        'application': 'application',
        'communities': 'communities',
        'description': 'description',
        'device_name': 'device_name',
        'is_enabled': 'is_enabled',
        'local_pref': 'local_pref',
        'med': 'med',
        'neighbor_id': 'neighbor_id',
        'next_hop': 'next_hop',
        'origin': 'origin',
        'prefix': 'prefix'
    }

    def __init__(self, application=None, communities=None, description=None, device_name=None, is_enabled=None, local_pref=None, med=None, neighbor_id=None, next_hop=None, origin=None, prefix=None):  # noqa: E501
        """HostBgpNeighborPrefixObject - a model defined in Swagger"""  # noqa: E501

        self._application = None
        self._communities = None
        self._description = None
        self._device_name = None
        self._is_enabled = None
        self._local_pref = None
        self._med = None
        self._neighbor_id = None
        self._next_hop = None
        self._origin = None
        self._prefix = None
        self.discriminator = None

        self.application = application
        if communities is not None:
            self.communities = communities
        if description is not None:
            self.description = description
        self.device_name = device_name
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if local_pref is not None:
            self.local_pref = local_pref
        if med is not None:
            self.med = med
        self.neighbor_id = neighbor_id
        self.next_hop = next_hop
        self.origin = origin
        self.prefix = prefix

    @property
    def application(self):
        """Gets the application of this HostBgpNeighborPrefixObject.  # noqa: E501

        Application name  # noqa: E501

        :return: The application of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this HostBgpNeighborPrefixObject.

        Application name  # noqa: E501

        :param application: The application of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: str
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")  # noqa: E501

        self._application = application

    @property
    def communities(self):
        """Gets the communities of this HostBgpNeighborPrefixObject.  # noqa: E501

        List of community names  # noqa: E501

        :return: The communities of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._communities

    @communities.setter
    def communities(self, communities):
        """Sets the communities of this HostBgpNeighborPrefixObject.

        List of community names  # noqa: E501

        :param communities: The communities of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: list[object]
        """

        self._communities = communities

    @property
    def description(self):
        """Gets the description of this HostBgpNeighborPrefixObject.  # noqa: E501


        :return: The description of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HostBgpNeighborPrefixObject.


        :param description: The description of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_name(self):
        """Gets the device_name of this HostBgpNeighborPrefixObject.  # noqa: E501

        Device name  # noqa: E501

        :return: The device_name of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this HostBgpNeighborPrefixObject.

        Device name  # noqa: E501

        :param device_name: The device_name of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")  # noqa: E501

        self._device_name = device_name

    @property
    def is_enabled(self):
        """Gets the is_enabled of this HostBgpNeighborPrefixObject.  # noqa: E501

        Announce prefix state  # noqa: E501

        :return: The is_enabled of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this HostBgpNeighborPrefixObject.

        Announce prefix state  # noqa: E501

        :param is_enabled: The is_enabled of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def local_pref(self):
        """Gets the local_pref of this HostBgpNeighborPrefixObject.  # noqa: E501

        Local preference  # noqa: E501

        :return: The local_pref of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: int
        """
        return self._local_pref

    @local_pref.setter
    def local_pref(self, local_pref):
        """Sets the local_pref of this HostBgpNeighborPrefixObject.

        Local preference  # noqa: E501

        :param local_pref: The local_pref of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: int
        """

        self._local_pref = local_pref

    @property
    def med(self):
        """Gets the med of this HostBgpNeighborPrefixObject.  # noqa: E501

        Multi-Exit discriminator  # noqa: E501

        :return: The med of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: int
        """
        return self._med

    @med.setter
    def med(self, med):
        """Sets the med of this HostBgpNeighborPrefixObject.

        Multi-Exit discriminator  # noqa: E501

        :param med: The med of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: int
        """

        self._med = med

    @property
    def neighbor_id(self):
        """Gets the neighbor_id of this HostBgpNeighborPrefixObject.  # noqa: E501

        UUIDv1 of HostBgpNeighbor  # noqa: E501

        :return: The neighbor_id of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_id

    @neighbor_id.setter
    def neighbor_id(self, neighbor_id):
        """Sets the neighbor_id of this HostBgpNeighborPrefixObject.

        UUIDv1 of HostBgpNeighbor  # noqa: E501

        :param neighbor_id: The neighbor_id of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: str
        """
        if neighbor_id is None:
            raise ValueError("Invalid value for `neighbor_id`, must not be `None`")  # noqa: E501

        self._neighbor_id = neighbor_id

    @property
    def next_hop(self):
        """Gets the next_hop of this HostBgpNeighborPrefixObject.  # noqa: E501

        Next hop IP Address  # noqa: E501

        :return: The next_hop of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this HostBgpNeighborPrefixObject.

        Next hop IP Address  # noqa: E501

        :param next_hop: The next_hop of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: str
        """
        if next_hop is None:
            raise ValueError("Invalid value for `next_hop`, must not be `None`")  # noqa: E501

        self._next_hop = next_hop

    @property
    def origin(self):
        """Gets the origin of this HostBgpNeighborPrefixObject.  # noqa: E501

        Origin name  # noqa: E501

        :return: The origin of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this HostBgpNeighborPrefixObject.

        Origin name  # noqa: E501

        :param origin: The origin of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501
        allowed_values = ["iBGP", "eBGP", "INCOMPLETE"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"  # noqa: E501
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def prefix(self):
        """Gets the prefix of this HostBgpNeighborPrefixObject.  # noqa: E501

        IP Prefix  # noqa: E501

        :return: The prefix of this HostBgpNeighborPrefixObject.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this HostBgpNeighborPrefixObject.

        IP Prefix  # noqa: E501

        :param prefix: The prefix of this HostBgpNeighborPrefixObject.  # noqa: E501
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostBgpNeighborPrefixObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostBgpNeighborPrefixObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
