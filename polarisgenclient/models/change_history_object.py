# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChangeHistoryObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'change_ended_on': 'str',
        'change_started_on': 'str',
        'client_ipaddr': 'str',
        'client_request_payload': 'str',
        'created_at': 'str',
        'device_name': 'str',
        'device_request_payload': 'str',
        'error_message': 'str',
        'id': 'str',
        'is_success': 'bool'
    }

    attribute_map = {
        'change_ended_on': 'change_ended_on',
        'change_started_on': 'change_started_on',
        'client_ipaddr': 'client_ipaddr',
        'client_request_payload': 'client_request_payload',
        'created_at': 'created_at',
        'device_name': 'device_name',
        'device_request_payload': 'device_request_payload',
        'error_message': 'error_message',
        'id': 'id',
        'is_success': 'is_success'
    }

    def __init__(self, change_ended_on=None, change_started_on=None, client_ipaddr=None, client_request_payload=None, created_at=None, device_name=None, device_request_payload=None, error_message=None, id=None, is_success=None):  # noqa: E501
        """ChangeHistoryObject - a model defined in Swagger"""  # noqa: E501

        self._change_ended_on = None
        self._change_started_on = None
        self._client_ipaddr = None
        self._client_request_payload = None
        self._created_at = None
        self._device_name = None
        self._device_request_payload = None
        self._error_message = None
        self._id = None
        self._is_success = None
        self.discriminator = None

        self.change_ended_on = change_ended_on
        self.change_started_on = change_started_on
        self.client_ipaddr = client_ipaddr
        if client_request_payload is not None:
            self.client_request_payload = client_request_payload
        self.created_at = created_at
        self.device_name = device_name
        if device_request_payload is not None:
            self.device_request_payload = device_request_payload
        if error_message is not None:
            self.error_message = error_message
        self.id = id
        self.is_success = is_success

    @property
    def change_ended_on(self):
        """Gets the change_ended_on of this ChangeHistoryObject.  # noqa: E501


        :return: The change_ended_on of this ChangeHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._change_ended_on

    @change_ended_on.setter
    def change_ended_on(self, change_ended_on):
        """Sets the change_ended_on of this ChangeHistoryObject.


        :param change_ended_on: The change_ended_on of this ChangeHistoryObject.  # noqa: E501
        :type: str
        """
        if change_ended_on is None:
            raise ValueError("Invalid value for `change_ended_on`, must not be `None`")  # noqa: E501

        self._change_ended_on = change_ended_on

    @property
    def change_started_on(self):
        """Gets the change_started_on of this ChangeHistoryObject.  # noqa: E501


        :return: The change_started_on of this ChangeHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._change_started_on

    @change_started_on.setter
    def change_started_on(self, change_started_on):
        """Sets the change_started_on of this ChangeHistoryObject.


        :param change_started_on: The change_started_on of this ChangeHistoryObject.  # noqa: E501
        :type: str
        """
        if change_started_on is None:
            raise ValueError("Invalid value for `change_started_on`, must not be `None`")  # noqa: E501

        self._change_started_on = change_started_on

    @property
    def client_ipaddr(self):
        """Gets the client_ipaddr of this ChangeHistoryObject.  # noqa: E501


        :return: The client_ipaddr of this ChangeHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._client_ipaddr

    @client_ipaddr.setter
    def client_ipaddr(self, client_ipaddr):
        """Sets the client_ipaddr of this ChangeHistoryObject.


        :param client_ipaddr: The client_ipaddr of this ChangeHistoryObject.  # noqa: E501
        :type: str
        """
        if client_ipaddr is None:
            raise ValueError("Invalid value for `client_ipaddr`, must not be `None`")  # noqa: E501

        self._client_ipaddr = client_ipaddr

    @property
    def client_request_payload(self):
        """Gets the client_request_payload of this ChangeHistoryObject.  # noqa: E501


        :return: The client_request_payload of this ChangeHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._client_request_payload

    @client_request_payload.setter
    def client_request_payload(self, client_request_payload):
        """Sets the client_request_payload of this ChangeHistoryObject.


        :param client_request_payload: The client_request_payload of this ChangeHistoryObject.  # noqa: E501
        :type: str
        """

        self._client_request_payload = client_request_payload

    @property
    def created_at(self):
        """Gets the created_at of this ChangeHistoryObject.  # noqa: E501


        :return: The created_at of this ChangeHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ChangeHistoryObject.


        :param created_at: The created_at of this ChangeHistoryObject.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def device_name(self):
        """Gets the device_name of this ChangeHistoryObject.  # noqa: E501


        :return: The device_name of this ChangeHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this ChangeHistoryObject.


        :param device_name: The device_name of this ChangeHistoryObject.  # noqa: E501
        :type: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")  # noqa: E501

        self._device_name = device_name

    @property
    def device_request_payload(self):
        """Gets the device_request_payload of this ChangeHistoryObject.  # noqa: E501


        :return: The device_request_payload of this ChangeHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._device_request_payload

    @device_request_payload.setter
    def device_request_payload(self, device_request_payload):
        """Sets the device_request_payload of this ChangeHistoryObject.


        :param device_request_payload: The device_request_payload of this ChangeHistoryObject.  # noqa: E501
        :type: str
        """

        self._device_request_payload = device_request_payload

    @property
    def error_message(self):
        """Gets the error_message of this ChangeHistoryObject.  # noqa: E501


        :return: The error_message of this ChangeHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ChangeHistoryObject.


        :param error_message: The error_message of this ChangeHistoryObject.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def id(self):
        """Gets the id of this ChangeHistoryObject.  # noqa: E501


        :return: The id of this ChangeHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChangeHistoryObject.


        :param id: The id of this ChangeHistoryObject.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_success(self):
        """Gets the is_success of this ChangeHistoryObject.  # noqa: E501


        :return: The is_success of this ChangeHistoryObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this ChangeHistoryObject.


        :param is_success: The is_success of this ChangeHistoryObject.  # noqa: E501
        :type: bool
        """
        if is_success is None:
            raise ValueError("Invalid value for `is_success`, must not be `None`")  # noqa: E501

        self._is_success = is_success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeHistoryObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeHistoryObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
