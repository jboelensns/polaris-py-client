# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemProvisionObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'autostart': 'bool',
        'base_image': 'str',
        'cpus': 'int',
        'fqdn': 'str',
        'kvm_hostname': 'str',
        'memory_ki_b': 'int',
        'name': 'str',
        'network_config': 'SystemProvisionObjectNetworkConfig',
        'override_domain': 'str',
        'pop_name': 'str'
    }

    attribute_map = {
        'autostart': 'autostart',
        'base_image': 'base_image',
        'cpus': 'cpus',
        'fqdn': 'fqdn',
        'kvm_hostname': 'kvm_hostname',
        'memory_ki_b': 'memoryKiB',
        'name': 'name',
        'network_config': 'network_config',
        'override_domain': 'override_domain',
        'pop_name': 'pop_name'
    }

    def __init__(self, autostart=True, base_image='default_vm', cpus=1, fqdn=None, kvm_hostname=None, memory_ki_b=None, name=None, network_config=None, override_domain=None, pop_name=None):  # noqa: E501
        """SystemProvisionObject - a model defined in Swagger"""  # noqa: E501

        self._autostart = None
        self._base_image = None
        self._cpus = None
        self._fqdn = None
        self._kvm_hostname = None
        self._memory_ki_b = None
        self._name = None
        self._network_config = None
        self._override_domain = None
        self._pop_name = None
        self.discriminator = None

        if autostart is not None:
            self.autostart = autostart
        if base_image is not None:
            self.base_image = base_image
        if cpus is not None:
            self.cpus = cpus
        if fqdn is not None:
            self.fqdn = fqdn
        self.kvm_hostname = kvm_hostname
        if memory_ki_b is not None:
            self.memory_ki_b = memory_ki_b
        if name is not None:
            self.name = name
        if network_config is not None:
            self.network_config = network_config
        if override_domain is not None:
            self.override_domain = override_domain
        self.pop_name = pop_name

    @property
    def autostart(self):
        """Gets the autostart of this SystemProvisionObject.  # noqa: E501


        :return: The autostart of this SystemProvisionObject.  # noqa: E501
        :rtype: bool
        """
        return self._autostart

    @autostart.setter
    def autostart(self, autostart):
        """Sets the autostart of this SystemProvisionObject.


        :param autostart: The autostart of this SystemProvisionObject.  # noqa: E501
        :type: bool
        """

        self._autostart = autostart

    @property
    def base_image(self):
        """Gets the base_image of this SystemProvisionObject.  # noqa: E501


        :return: The base_image of this SystemProvisionObject.  # noqa: E501
        :rtype: str
        """
        return self._base_image

    @base_image.setter
    def base_image(self, base_image):
        """Sets the base_image of this SystemProvisionObject.


        :param base_image: The base_image of this SystemProvisionObject.  # noqa: E501
        :type: str
        """

        self._base_image = base_image

    @property
    def cpus(self):
        """Gets the cpus of this SystemProvisionObject.  # noqa: E501


        :return: The cpus of this SystemProvisionObject.  # noqa: E501
        :rtype: int
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this SystemProvisionObject.


        :param cpus: The cpus of this SystemProvisionObject.  # noqa: E501
        :type: int
        """

        self._cpus = cpus

    @property
    def fqdn(self):
        """Gets the fqdn of this SystemProvisionObject.  # noqa: E501


        :return: The fqdn of this SystemProvisionObject.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this SystemProvisionObject.


        :param fqdn: The fqdn of this SystemProvisionObject.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def kvm_hostname(self):
        """Gets the kvm_hostname of this SystemProvisionObject.  # noqa: E501


        :return: The kvm_hostname of this SystemProvisionObject.  # noqa: E501
        :rtype: str
        """
        return self._kvm_hostname

    @kvm_hostname.setter
    def kvm_hostname(self, kvm_hostname):
        """Sets the kvm_hostname of this SystemProvisionObject.


        :param kvm_hostname: The kvm_hostname of this SystemProvisionObject.  # noqa: E501
        :type: str
        """
        if kvm_hostname is None:
            raise ValueError("Invalid value for `kvm_hostname`, must not be `None`")  # noqa: E501

        self._kvm_hostname = kvm_hostname

    @property
    def memory_ki_b(self):
        """Gets the memory_ki_b of this SystemProvisionObject.  # noqa: E501


        :return: The memory_ki_b of this SystemProvisionObject.  # noqa: E501
        :rtype: int
        """
        return self._memory_ki_b

    @memory_ki_b.setter
    def memory_ki_b(self, memory_ki_b):
        """Sets the memory_ki_b of this SystemProvisionObject.


        :param memory_ki_b: The memory_ki_b of this SystemProvisionObject.  # noqa: E501
        :type: int
        """

        self._memory_ki_b = memory_ki_b

    @property
    def name(self):
        """Gets the name of this SystemProvisionObject.  # noqa: E501


        :return: The name of this SystemProvisionObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemProvisionObject.


        :param name: The name of this SystemProvisionObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this SystemProvisionObject.  # noqa: E501


        :return: The network_config of this SystemProvisionObject.  # noqa: E501
        :rtype: SystemProvisionObjectNetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this SystemProvisionObject.


        :param network_config: The network_config of this SystemProvisionObject.  # noqa: E501
        :type: SystemProvisionObjectNetworkConfig
        """

        self._network_config = network_config

    @property
    def override_domain(self):
        """Gets the override_domain of this SystemProvisionObject.  # noqa: E501


        :return: The override_domain of this SystemProvisionObject.  # noqa: E501
        :rtype: str
        """
        return self._override_domain

    @override_domain.setter
    def override_domain(self, override_domain):
        """Sets the override_domain of this SystemProvisionObject.


        :param override_domain: The override_domain of this SystemProvisionObject.  # noqa: E501
        :type: str
        """

        self._override_domain = override_domain

    @property
    def pop_name(self):
        """Gets the pop_name of this SystemProvisionObject.  # noqa: E501


        :return: The pop_name of this SystemProvisionObject.  # noqa: E501
        :rtype: str
        """
        return self._pop_name

    @pop_name.setter
    def pop_name(self, pop_name):
        """Sets the pop_name of this SystemProvisionObject.


        :param pop_name: The pop_name of this SystemProvisionObject.  # noqa: E501
        :type: str
        """
        if pop_name is None:
            raise ValueError("Invalid value for `pop_name`, must not be `None`")  # noqa: E501

        self._pop_name = pop_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemProvisionObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemProvisionObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
