# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceBGPNeighborResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'created_at': 'str',
        'description': 'str',
        'device_name': 'str',
        'inbound_routemap': 'str',
        'local_as': 'int',
        'local_id': 'str',
        'neighbor_address': 'str',
        'neighbor_as': 'int',
        'neighbor_id': 'str',
        'outbound_routemap': 'str',
        'port': 'str',
        'state': 'str'
    }

    attribute_map = {
        'address': 'address',
        'created_at': 'created_at',
        'description': 'description',
        'device_name': 'device_name',
        'inbound_routemap': 'inbound_routemap',
        'local_as': 'local_as',
        'local_id': 'local_id',
        'neighbor_address': 'neighbor_address',
        'neighbor_as': 'neighbor_as',
        'neighbor_id': 'neighbor_id',
        'outbound_routemap': 'outbound_routemap',
        'port': 'port',
        'state': 'state'
    }

    def __init__(self, address=None, created_at=None, description=None, device_name=None, inbound_routemap=None, local_as=None, local_id=None, neighbor_address=None, neighbor_as=None, neighbor_id=None, outbound_routemap=None, port=None, state=None):  # noqa: E501
        """DeviceBGPNeighborResponse - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._created_at = None
        self._description = None
        self._device_name = None
        self._inbound_routemap = None
        self._local_as = None
        self._local_id = None
        self._neighbor_address = None
        self._neighbor_as = None
        self._neighbor_id = None
        self._outbound_routemap = None
        self._port = None
        self._state = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if device_name is not None:
            self.device_name = device_name
        if inbound_routemap is not None:
            self.inbound_routemap = inbound_routemap
        if local_as is not None:
            self.local_as = local_as
        if local_id is not None:
            self.local_id = local_id
        if neighbor_address is not None:
            self.neighbor_address = neighbor_address
        if neighbor_as is not None:
            self.neighbor_as = neighbor_as
        if neighbor_id is not None:
            self.neighbor_id = neighbor_id
        if outbound_routemap is not None:
            self.outbound_routemap = outbound_routemap
        if port is not None:
            self.port = port
        if state is not None:
            self.state = state

    @property
    def address(self):
        """Gets the address of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The address of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DeviceBGPNeighborResponse.


        :param address: The address of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def created_at(self):
        """Gets the created_at of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The created_at of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeviceBGPNeighborResponse.


        :param created_at: The created_at of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The description of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceBGPNeighborResponse.


        :param description: The description of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_name(self):
        """Gets the device_name of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The device_name of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DeviceBGPNeighborResponse.


        :param device_name: The device_name of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def inbound_routemap(self):
        """Gets the inbound_routemap of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The inbound_routemap of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._inbound_routemap

    @inbound_routemap.setter
    def inbound_routemap(self, inbound_routemap):
        """Sets the inbound_routemap of this DeviceBGPNeighborResponse.


        :param inbound_routemap: The inbound_routemap of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._inbound_routemap = inbound_routemap

    @property
    def local_as(self):
        """Gets the local_as of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The local_as of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: int
        """
        return self._local_as

    @local_as.setter
    def local_as(self, local_as):
        """Sets the local_as of this DeviceBGPNeighborResponse.


        :param local_as: The local_as of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: int
        """

        self._local_as = local_as

    @property
    def local_id(self):
        """Gets the local_id of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The local_id of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this DeviceBGPNeighborResponse.


        :param local_id: The local_id of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._local_id = local_id

    @property
    def neighbor_address(self):
        """Gets the neighbor_address of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The neighbor_address of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_address

    @neighbor_address.setter
    def neighbor_address(self, neighbor_address):
        """Sets the neighbor_address of this DeviceBGPNeighborResponse.


        :param neighbor_address: The neighbor_address of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._neighbor_address = neighbor_address

    @property
    def neighbor_as(self):
        """Gets the neighbor_as of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The neighbor_as of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: int
        """
        return self._neighbor_as

    @neighbor_as.setter
    def neighbor_as(self, neighbor_as):
        """Sets the neighbor_as of this DeviceBGPNeighborResponse.


        :param neighbor_as: The neighbor_as of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: int
        """

        self._neighbor_as = neighbor_as

    @property
    def neighbor_id(self):
        """Gets the neighbor_id of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The neighbor_id of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_id

    @neighbor_id.setter
    def neighbor_id(self, neighbor_id):
        """Sets the neighbor_id of this DeviceBGPNeighborResponse.


        :param neighbor_id: The neighbor_id of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._neighbor_id = neighbor_id

    @property
    def outbound_routemap(self):
        """Gets the outbound_routemap of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The outbound_routemap of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._outbound_routemap

    @outbound_routemap.setter
    def outbound_routemap(self, outbound_routemap):
        """Sets the outbound_routemap of this DeviceBGPNeighborResponse.


        :param outbound_routemap: The outbound_routemap of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._outbound_routemap = outbound_routemap

    @property
    def port(self):
        """Gets the port of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The port of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DeviceBGPNeighborResponse.


        :param port: The port of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def state(self):
        """Gets the state of this DeviceBGPNeighborResponse.  # noqa: E501


        :return: The state of this DeviceBGPNeighborResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DeviceBGPNeighborResponse.


        :param state: The state of this DeviceBGPNeighborResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceBGPNeighborResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceBGPNeighborResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
