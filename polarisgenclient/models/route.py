# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Route(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interface_name': 'str',
        'ip_destination': 'str',
        'ip_next_hop': 'str'
    }

    attribute_map = {
        'interface_name': 'interface_name',
        'ip_destination': 'ip_destination',
        'ip_next_hop': 'ip_next_hop'
    }

    def __init__(self, interface_name=None, ip_destination=None, ip_next_hop=None):  # noqa: E501
        """Route - a model defined in Swagger"""  # noqa: E501

        self._interface_name = None
        self._ip_destination = None
        self._ip_next_hop = None
        self.discriminator = None

        if interface_name is not None:
            self.interface_name = interface_name
        if ip_destination is not None:
            self.ip_destination = ip_destination
        if ip_next_hop is not None:
            self.ip_next_hop = ip_next_hop

    @property
    def interface_name(self):
        """Gets the interface_name of this Route.  # noqa: E501


        :return: The interface_name of this Route.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this Route.


        :param interface_name: The interface_name of this Route.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def ip_destination(self):
        """Gets the ip_destination of this Route.  # noqa: E501


        :return: The ip_destination of this Route.  # noqa: E501
        :rtype: str
        """
        return self._ip_destination

    @ip_destination.setter
    def ip_destination(self, ip_destination):
        """Sets the ip_destination of this Route.


        :param ip_destination: The ip_destination of this Route.  # noqa: E501
        :type: str
        """

        self._ip_destination = ip_destination

    @property
    def ip_next_hop(self):
        """Gets the ip_next_hop of this Route.  # noqa: E501


        :return: The ip_next_hop of this Route.  # noqa: E501
        :rtype: str
        """
        return self._ip_next_hop

    @ip_next_hop.setter
    def ip_next_hop(self, ip_next_hop):
        """Sets the ip_next_hop of this Route.


        :param ip_next_hop: The ip_next_hop of this Route.  # noqa: E501
        :type: str
        """

        self._ip_next_hop = ip_next_hop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Route, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Route):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
