# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemImageObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chassis_part_number': 'str',
        'chassis_serial_number': 'str',
        'chassis_type': 'str',
        'description': 'str',
        'device_name': 'str',
        'firmware_version': 'str',
        'hardware_generation': 'str',
        'hostname': 'str',
        'ipmi_mac_address': 'str',
        'is_enabled': 'bool',
        'is_vm': 'bool',
        'mac_addresses': 'list[object]',
        'memory': 'str',
        'vendor_asset_tag': 'str'
    }

    attribute_map = {
        'chassis_part_number': 'chassis_part_number',
        'chassis_serial_number': 'chassis_serial_number',
        'chassis_type': 'chassis_type',
        'description': 'description',
        'device_name': 'device_name',
        'firmware_version': 'firmware_version',
        'hardware_generation': 'hardware_generation',
        'hostname': 'hostname',
        'ipmi_mac_address': 'ipmi_mac_address',
        'is_enabled': 'is_enabled',
        'is_vm': 'is_vm',
        'mac_addresses': 'mac_addresses',
        'memory': 'memory',
        'vendor_asset_tag': 'vendor_asset_tag'
    }

    def __init__(self, chassis_part_number=None, chassis_serial_number=None, chassis_type=None, description=None, device_name=None, firmware_version=None, hardware_generation=None, hostname=None, ipmi_mac_address=None, is_enabled=None, is_vm=None, mac_addresses=None, memory=None, vendor_asset_tag=None):  # noqa: E501
        """SystemImageObject - a model defined in Swagger"""  # noqa: E501

        self._chassis_part_number = None
        self._chassis_serial_number = None
        self._chassis_type = None
        self._description = None
        self._device_name = None
        self._firmware_version = None
        self._hardware_generation = None
        self._hostname = None
        self._ipmi_mac_address = None
        self._is_enabled = None
        self._is_vm = None
        self._mac_addresses = None
        self._memory = None
        self._vendor_asset_tag = None
        self.discriminator = None

        if chassis_part_number is not None:
            self.chassis_part_number = chassis_part_number
        if chassis_serial_number is not None:
            self.chassis_serial_number = chassis_serial_number
        if chassis_type is not None:
            self.chassis_type = chassis_type
        if description is not None:
            self.description = description
        self.device_name = device_name
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if hardware_generation is not None:
            self.hardware_generation = hardware_generation
        if hostname is not None:
            self.hostname = hostname
        if ipmi_mac_address is not None:
            self.ipmi_mac_address = ipmi_mac_address
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_vm is not None:
            self.is_vm = is_vm
        self.mac_addresses = mac_addresses
        if memory is not None:
            self.memory = memory
        if vendor_asset_tag is not None:
            self.vendor_asset_tag = vendor_asset_tag

    @property
    def chassis_part_number(self):
        """Gets the chassis_part_number of this SystemImageObject.  # noqa: E501


        :return: The chassis_part_number of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._chassis_part_number

    @chassis_part_number.setter
    def chassis_part_number(self, chassis_part_number):
        """Sets the chassis_part_number of this SystemImageObject.


        :param chassis_part_number: The chassis_part_number of this SystemImageObject.  # noqa: E501
        :type: str
        """

        self._chassis_part_number = chassis_part_number

    @property
    def chassis_serial_number(self):
        """Gets the chassis_serial_number of this SystemImageObject.  # noqa: E501


        :return: The chassis_serial_number of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._chassis_serial_number

    @chassis_serial_number.setter
    def chassis_serial_number(self, chassis_serial_number):
        """Sets the chassis_serial_number of this SystemImageObject.


        :param chassis_serial_number: The chassis_serial_number of this SystemImageObject.  # noqa: E501
        :type: str
        """

        self._chassis_serial_number = chassis_serial_number

    @property
    def chassis_type(self):
        """Gets the chassis_type of this SystemImageObject.  # noqa: E501


        :return: The chassis_type of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._chassis_type

    @chassis_type.setter
    def chassis_type(self, chassis_type):
        """Sets the chassis_type of this SystemImageObject.


        :param chassis_type: The chassis_type of this SystemImageObject.  # noqa: E501
        :type: str
        """

        self._chassis_type = chassis_type

    @property
    def description(self):
        """Gets the description of this SystemImageObject.  # noqa: E501


        :return: The description of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SystemImageObject.


        :param description: The description of this SystemImageObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_name(self):
        """Gets the device_name of this SystemImageObject.  # noqa: E501


        :return: The device_name of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this SystemImageObject.


        :param device_name: The device_name of this SystemImageObject.  # noqa: E501
        :type: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")  # noqa: E501

        self._device_name = device_name

    @property
    def firmware_version(self):
        """Gets the firmware_version of this SystemImageObject.  # noqa: E501


        :return: The firmware_version of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this SystemImageObject.


        :param firmware_version: The firmware_version of this SystemImageObject.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def hardware_generation(self):
        """Gets the hardware_generation of this SystemImageObject.  # noqa: E501


        :return: The hardware_generation of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._hardware_generation

    @hardware_generation.setter
    def hardware_generation(self, hardware_generation):
        """Sets the hardware_generation of this SystemImageObject.


        :param hardware_generation: The hardware_generation of this SystemImageObject.  # noqa: E501
        :type: str
        """

        self._hardware_generation = hardware_generation

    @property
    def hostname(self):
        """Gets the hostname of this SystemImageObject.  # noqa: E501


        :return: The hostname of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SystemImageObject.


        :param hostname: The hostname of this SystemImageObject.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def ipmi_mac_address(self):
        """Gets the ipmi_mac_address of this SystemImageObject.  # noqa: E501


        :return: The ipmi_mac_address of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._ipmi_mac_address

    @ipmi_mac_address.setter
    def ipmi_mac_address(self, ipmi_mac_address):
        """Sets the ipmi_mac_address of this SystemImageObject.


        :param ipmi_mac_address: The ipmi_mac_address of this SystemImageObject.  # noqa: E501
        :type: str
        """

        self._ipmi_mac_address = ipmi_mac_address

    @property
    def is_enabled(self):
        """Gets the is_enabled of this SystemImageObject.  # noqa: E501


        :return: The is_enabled of this SystemImageObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this SystemImageObject.


        :param is_enabled: The is_enabled of this SystemImageObject.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_vm(self):
        """Gets the is_vm of this SystemImageObject.  # noqa: E501


        :return: The is_vm of this SystemImageObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_vm

    @is_vm.setter
    def is_vm(self, is_vm):
        """Sets the is_vm of this SystemImageObject.


        :param is_vm: The is_vm of this SystemImageObject.  # noqa: E501
        :type: bool
        """

        self._is_vm = is_vm

    @property
    def mac_addresses(self):
        """Gets the mac_addresses of this SystemImageObject.  # noqa: E501


        :return: The mac_addresses of this SystemImageObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._mac_addresses

    @mac_addresses.setter
    def mac_addresses(self, mac_addresses):
        """Sets the mac_addresses of this SystemImageObject.


        :param mac_addresses: The mac_addresses of this SystemImageObject.  # noqa: E501
        :type: list[object]
        """
        if mac_addresses is None:
            raise ValueError("Invalid value for `mac_addresses`, must not be `None`")  # noqa: E501

        self._mac_addresses = mac_addresses

    @property
    def memory(self):
        """Gets the memory of this SystemImageObject.  # noqa: E501


        :return: The memory of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this SystemImageObject.


        :param memory: The memory of this SystemImageObject.  # noqa: E501
        :type: str
        """

        self._memory = memory

    @property
    def vendor_asset_tag(self):
        """Gets the vendor_asset_tag of this SystemImageObject.  # noqa: E501


        :return: The vendor_asset_tag of this SystemImageObject.  # noqa: E501
        :rtype: str
        """
        return self._vendor_asset_tag

    @vendor_asset_tag.setter
    def vendor_asset_tag(self, vendor_asset_tag):
        """Sets the vendor_asset_tag of this SystemImageObject.


        :param vendor_asset_tag: The vendor_asset_tag of this SystemImageObject.  # noqa: E501
        :type: str
        """

        self._vendor_asset_tag = vendor_asset_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemImageObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemImageObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
