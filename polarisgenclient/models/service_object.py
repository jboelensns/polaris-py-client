# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ServiceObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_addresses': 'list[object]',
        'external_name': 'str',
        'external_ports': 'list[object]',
        'health_check_urls': 'list[object]',
        'name': 'str',
        'pop_name': 'str',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'external_addresses': 'external_addresses',
        'external_name': 'external_name',
        'external_ports': 'external_ports',
        'health_check_urls': 'health_check_urls',
        'name': 'name',
        'pop_name': 'pop_name',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, external_addresses=None, external_name=None, external_ports=None, health_check_urls=None, name=None, pop_name=None, status=None, type=None):  # noqa: E501
        """ServiceObject - a model defined in Swagger"""  # noqa: E501

        self._external_addresses = None
        self._external_name = None
        self._external_ports = None
        self._health_check_urls = None
        self._name = None
        self._pop_name = None
        self._status = None
        self._type = None
        self.discriminator = None

        if external_addresses is not None:
            self.external_addresses = external_addresses
        if external_name is not None:
            self.external_name = external_name
        if external_ports is not None:
            self.external_ports = external_ports
        if health_check_urls is not None:
            self.health_check_urls = health_check_urls
        self.name = name
        self.pop_name = pop_name
        self.status = status
        self.type = type

    @property
    def external_addresses(self):
        """Gets the external_addresses of this ServiceObject.  # noqa: E501

        Array of IPv4 or IPv6 addresses  # noqa: E501

        :return: The external_addresses of this ServiceObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._external_addresses

    @external_addresses.setter
    def external_addresses(self, external_addresses):
        """Sets the external_addresses of this ServiceObject.

        Array of IPv4 or IPv6 addresses  # noqa: E501

        :param external_addresses: The external_addresses of this ServiceObject.  # noqa: E501
        :type: list[object]
        """

        self._external_addresses = external_addresses

    @property
    def external_name(self):
        """Gets the external_name of this ServiceObject.  # noqa: E501


        :return: The external_name of this ServiceObject.  # noqa: E501
        :rtype: str
        """
        return self._external_name

    @external_name.setter
    def external_name(self, external_name):
        """Sets the external_name of this ServiceObject.


        :param external_name: The external_name of this ServiceObject.  # noqa: E501
        :type: str
        """

        self._external_name = external_name

    @property
    def external_ports(self):
        """Gets the external_ports of this ServiceObject.  # noqa: E501

        Array of protocol:port definitions  # noqa: E501

        :return: The external_ports of this ServiceObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._external_ports

    @external_ports.setter
    def external_ports(self, external_ports):
        """Sets the external_ports of this ServiceObject.

        Array of protocol:port definitions  # noqa: E501

        :param external_ports: The external_ports of this ServiceObject.  # noqa: E501
        :type: list[object]
        """

        self._external_ports = external_ports

    @property
    def health_check_urls(self):
        """Gets the health_check_urls of this ServiceObject.  # noqa: E501

        Array of health check URLs  # noqa: E501

        :return: The health_check_urls of this ServiceObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._health_check_urls

    @health_check_urls.setter
    def health_check_urls(self, health_check_urls):
        """Sets the health_check_urls of this ServiceObject.

        Array of health check URLs  # noqa: E501

        :param health_check_urls: The health_check_urls of this ServiceObject.  # noqa: E501
        :type: list[object]
        """

        self._health_check_urls = health_check_urls

    @property
    def name(self):
        """Gets the name of this ServiceObject.  # noqa: E501


        :return: The name of this ServiceObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceObject.


        :param name: The name of this ServiceObject.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def pop_name(self):
        """Gets the pop_name of this ServiceObject.  # noqa: E501


        :return: The pop_name of this ServiceObject.  # noqa: E501
        :rtype: str
        """
        return self._pop_name

    @pop_name.setter
    def pop_name(self, pop_name):
        """Sets the pop_name of this ServiceObject.


        :param pop_name: The pop_name of this ServiceObject.  # noqa: E501
        :type: str
        """
        if pop_name is None:
            raise ValueError("Invalid value for `pop_name`, must not be `None`")  # noqa: E501

        self._pop_name = pop_name

    @property
    def status(self):
        """Gets the status of this ServiceObject.  # noqa: E501


        :return: The status of this ServiceObject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceObject.


        :param status: The status of this ServiceObject.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this ServiceObject.  # noqa: E501


        :return: The type of this ServiceObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceObject.


        :param type: The type of this ServiceObject.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
