# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_version': 'str',
        'change_enabled': 'bool',
        'created_at': 'str',
        'has_agent': 'bool',
        'is_enable': 'bool',
        'last_seen_on': 'str',
        'latitude': 'float',
        'librenms_device_id': 'int',
        'longitude': 'float',
        'management_ip_address': 'str',
        'model_name': 'str',
        'name': 'str',
        'os': 'str',
        'os_version': 'str',
        'pop_name': 'str',
        'serial_number': 'str',
        'system_mac_address': 'str',
        'tacacs_ctx': 'str',
        'use_dns': 'bool'
    }

    attribute_map = {
        'agent_version': 'agent_version',
        'change_enabled': 'change_enabled',
        'created_at': 'created_at',
        'has_agent': 'has_agent',
        'is_enable': 'is_enable',
        'last_seen_on': 'last_seen_on',
        'latitude': 'latitude',
        'librenms_device_id': 'librenms_device_id',
        'longitude': 'longitude',
        'management_ip_address': 'management_ip_address',
        'model_name': 'model_name',
        'name': 'name',
        'os': 'os',
        'os_version': 'os_version',
        'pop_name': 'pop_name',
        'serial_number': 'serial_number',
        'system_mac_address': 'system_mac_address',
        'tacacs_ctx': 'tacacs_ctx',
        'use_dns': 'use_dns'
    }

    def __init__(self, agent_version=None, change_enabled=None, created_at=None, has_agent=None, is_enable=None, last_seen_on=None, latitude=None, librenms_device_id=None, longitude=None, management_ip_address=None, model_name=None, name=None, os=None, os_version=None, pop_name=None, serial_number=None, system_mac_address=None, tacacs_ctx=None, use_dns=None):  # noqa: E501
        """DeviceObject - a model defined in Swagger"""  # noqa: E501

        self._agent_version = None
        self._change_enabled = None
        self._created_at = None
        self._has_agent = None
        self._is_enable = None
        self._last_seen_on = None
        self._latitude = None
        self._librenms_device_id = None
        self._longitude = None
        self._management_ip_address = None
        self._model_name = None
        self._name = None
        self._os = None
        self._os_version = None
        self._pop_name = None
        self._serial_number = None
        self._system_mac_address = None
        self._tacacs_ctx = None
        self._use_dns = None
        self.discriminator = None

        if agent_version is not None:
            self.agent_version = agent_version
        if change_enabled is not None:
            self.change_enabled = change_enabled
        if created_at is not None:
            self.created_at = created_at
        if has_agent is not None:
            self.has_agent = has_agent
        if is_enable is not None:
            self.is_enable = is_enable
        if last_seen_on is not None:
            self.last_seen_on = last_seen_on
        if latitude is not None:
            self.latitude = latitude
        if librenms_device_id is not None:
            self.librenms_device_id = librenms_device_id
        if longitude is not None:
            self.longitude = longitude
        if management_ip_address is not None:
            self.management_ip_address = management_ip_address
        if model_name is not None:
            self.model_name = model_name
        if name is not None:
            self.name = name
        if os is not None:
            self.os = os
        if os_version is not None:
            self.os_version = os_version
        if pop_name is not None:
            self.pop_name = pop_name
        if serial_number is not None:
            self.serial_number = serial_number
        if system_mac_address is not None:
            self.system_mac_address = system_mac_address
        if tacacs_ctx is not None:
            self.tacacs_ctx = tacacs_ctx
        if use_dns is not None:
            self.use_dns = use_dns

    @property
    def agent_version(self):
        """Gets the agent_version of this DeviceObject.  # noqa: E501


        :return: The agent_version of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """Sets the agent_version of this DeviceObject.


        :param agent_version: The agent_version of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._agent_version = agent_version

    @property
    def change_enabled(self):
        """Gets the change_enabled of this DeviceObject.  # noqa: E501


        :return: The change_enabled of this DeviceObject.  # noqa: E501
        :rtype: bool
        """
        return self._change_enabled

    @change_enabled.setter
    def change_enabled(self, change_enabled):
        """Sets the change_enabled of this DeviceObject.


        :param change_enabled: The change_enabled of this DeviceObject.  # noqa: E501
        :type: bool
        """

        self._change_enabled = change_enabled

    @property
    def created_at(self):
        """Gets the created_at of this DeviceObject.  # noqa: E501


        :return: The created_at of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeviceObject.


        :param created_at: The created_at of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def has_agent(self):
        """Gets the has_agent of this DeviceObject.  # noqa: E501


        :return: The has_agent of this DeviceObject.  # noqa: E501
        :rtype: bool
        """
        return self._has_agent

    @has_agent.setter
    def has_agent(self, has_agent):
        """Sets the has_agent of this DeviceObject.


        :param has_agent: The has_agent of this DeviceObject.  # noqa: E501
        :type: bool
        """

        self._has_agent = has_agent

    @property
    def is_enable(self):
        """Gets the is_enable of this DeviceObject.  # noqa: E501


        :return: The is_enable of this DeviceObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_enable

    @is_enable.setter
    def is_enable(self, is_enable):
        """Sets the is_enable of this DeviceObject.


        :param is_enable: The is_enable of this DeviceObject.  # noqa: E501
        :type: bool
        """

        self._is_enable = is_enable

    @property
    def last_seen_on(self):
        """Gets the last_seen_on of this DeviceObject.  # noqa: E501


        :return: The last_seen_on of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._last_seen_on

    @last_seen_on.setter
    def last_seen_on(self, last_seen_on):
        """Sets the last_seen_on of this DeviceObject.


        :param last_seen_on: The last_seen_on of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._last_seen_on = last_seen_on

    @property
    def latitude(self):
        """Gets the latitude of this DeviceObject.  # noqa: E501


        :return: The latitude of this DeviceObject.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this DeviceObject.


        :param latitude: The latitude of this DeviceObject.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def librenms_device_id(self):
        """Gets the librenms_device_id of this DeviceObject.  # noqa: E501


        :return: The librenms_device_id of this DeviceObject.  # noqa: E501
        :rtype: int
        """
        return self._librenms_device_id

    @librenms_device_id.setter
    def librenms_device_id(self, librenms_device_id):
        """Sets the librenms_device_id of this DeviceObject.


        :param librenms_device_id: The librenms_device_id of this DeviceObject.  # noqa: E501
        :type: int
        """

        self._librenms_device_id = librenms_device_id

    @property
    def longitude(self):
        """Gets the longitude of this DeviceObject.  # noqa: E501


        :return: The longitude of this DeviceObject.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this DeviceObject.


        :param longitude: The longitude of this DeviceObject.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def management_ip_address(self):
        """Gets the management_ip_address of this DeviceObject.  # noqa: E501


        :return: The management_ip_address of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._management_ip_address

    @management_ip_address.setter
    def management_ip_address(self, management_ip_address):
        """Sets the management_ip_address of this DeviceObject.


        :param management_ip_address: The management_ip_address of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._management_ip_address = management_ip_address

    @property
    def model_name(self):
        """Gets the model_name of this DeviceObject.  # noqa: E501


        :return: The model_name of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DeviceObject.


        :param model_name: The model_name of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def name(self):
        """Gets the name of this DeviceObject.  # noqa: E501


        :return: The name of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceObject.


        :param name: The name of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def os(self):
        """Gets the os of this DeviceObject.  # noqa: E501


        :return: The os of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this DeviceObject.


        :param os: The os of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def os_version(self):
        """Gets the os_version of this DeviceObject.  # noqa: E501


        :return: The os_version of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this DeviceObject.


        :param os_version: The os_version of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def pop_name(self):
        """Gets the pop_name of this DeviceObject.  # noqa: E501


        :return: The pop_name of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._pop_name

    @pop_name.setter
    def pop_name(self, pop_name):
        """Sets the pop_name of this DeviceObject.


        :param pop_name: The pop_name of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._pop_name = pop_name

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceObject.  # noqa: E501


        :return: The serial_number of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceObject.


        :param serial_number: The serial_number of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def system_mac_address(self):
        """Gets the system_mac_address of this DeviceObject.  # noqa: E501


        :return: The system_mac_address of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._system_mac_address

    @system_mac_address.setter
    def system_mac_address(self, system_mac_address):
        """Sets the system_mac_address of this DeviceObject.


        :param system_mac_address: The system_mac_address of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._system_mac_address = system_mac_address

    @property
    def tacacs_ctx(self):
        """Gets the tacacs_ctx of this DeviceObject.  # noqa: E501


        :return: The tacacs_ctx of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._tacacs_ctx

    @tacacs_ctx.setter
    def tacacs_ctx(self, tacacs_ctx):
        """Sets the tacacs_ctx of this DeviceObject.


        :param tacacs_ctx: The tacacs_ctx of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._tacacs_ctx = tacacs_ctx

    @property
    def use_dns(self):
        """Gets the use_dns of this DeviceObject.  # noqa: E501


        :return: The use_dns of this DeviceObject.  # noqa: E501
        :rtype: bool
        """
        return self._use_dns

    @use_dns.setter
    def use_dns(self, use_dns):
        """Sets the use_dns of this DeviceObject.


        :param use_dns: The use_dns of this DeviceObject.  # noqa: E501
        :type: bool
        """

        self._use_dns = use_dns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
