# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DnsZoneRecordObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dnssec': 'bool',
        'edited_serial': 'int',
        'kind': 'str',
        'last_check': 'int',
        'masters': 'list[object]',
        'notified_serial': 'int',
        'rrsets': 'list[object]',
        'serial': 'int'
    }

    attribute_map = {
        'dnssec': 'dnssec',
        'edited_serial': 'edited_serial',
        'kind': 'kind',
        'last_check': 'last_check',
        'masters': 'masters',
        'notified_serial': 'notified_serial',
        'rrsets': 'rrsets',
        'serial': 'serial'
    }

    def __init__(self, dnssec=None, edited_serial=None, kind=None, last_check=None, masters=None, notified_serial=None, rrsets=None, serial=None):  # noqa: E501
        """DnsZoneRecordObject - a model defined in Swagger"""  # noqa: E501

        self._dnssec = None
        self._edited_serial = None
        self._kind = None
        self._last_check = None
        self._masters = None
        self._notified_serial = None
        self._rrsets = None
        self._serial = None
        self.discriminator = None

        if dnssec is not None:
            self.dnssec = dnssec
        if edited_serial is not None:
            self.edited_serial = edited_serial
        if kind is not None:
            self.kind = kind
        if last_check is not None:
            self.last_check = last_check
        if masters is not None:
            self.masters = masters
        if notified_serial is not None:
            self.notified_serial = notified_serial
        if rrsets is not None:
            self.rrsets = rrsets
        if serial is not None:
            self.serial = serial

    @property
    def dnssec(self):
        """Gets the dnssec of this DnsZoneRecordObject.  # noqa: E501

        dns sec enabled/disabled bool  # noqa: E501

        :return: The dnssec of this DnsZoneRecordObject.  # noqa: E501
        :rtype: bool
        """
        return self._dnssec

    @dnssec.setter
    def dnssec(self, dnssec):
        """Sets the dnssec of this DnsZoneRecordObject.

        dns sec enabled/disabled bool  # noqa: E501

        :param dnssec: The dnssec of this DnsZoneRecordObject.  # noqa: E501
        :type: bool
        """

        self._dnssec = dnssec

    @property
    def edited_serial(self):
        """Gets the edited_serial of this DnsZoneRecordObject.  # noqa: E501


        :return: The edited_serial of this DnsZoneRecordObject.  # noqa: E501
        :rtype: int
        """
        return self._edited_serial

    @edited_serial.setter
    def edited_serial(self, edited_serial):
        """Sets the edited_serial of this DnsZoneRecordObject.


        :param edited_serial: The edited_serial of this DnsZoneRecordObject.  # noqa: E501
        :type: int
        """

        self._edited_serial = edited_serial

    @property
    def kind(self):
        """Gets the kind of this DnsZoneRecordObject.  # noqa: E501

        zone kind  # noqa: E501

        :return: The kind of this DnsZoneRecordObject.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DnsZoneRecordObject.

        zone kind  # noqa: E501

        :param kind: The kind of this DnsZoneRecordObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["Master", "Native", "Slave"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def last_check(self):
        """Gets the last_check of this DnsZoneRecordObject.  # noqa: E501

        timestamp of last check  # noqa: E501

        :return: The last_check of this DnsZoneRecordObject.  # noqa: E501
        :rtype: int
        """
        return self._last_check

    @last_check.setter
    def last_check(self, last_check):
        """Sets the last_check of this DnsZoneRecordObject.

        timestamp of last check  # noqa: E501

        :param last_check: The last_check of this DnsZoneRecordObject.  # noqa: E501
        :type: int
        """

        self._last_check = last_check

    @property
    def masters(self):
        """Gets the masters of this DnsZoneRecordObject.  # noqa: E501

        array of master IP Addresses  # noqa: E501

        :return: The masters of this DnsZoneRecordObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._masters

    @masters.setter
    def masters(self, masters):
        """Sets the masters of this DnsZoneRecordObject.

        array of master IP Addresses  # noqa: E501

        :param masters: The masters of this DnsZoneRecordObject.  # noqa: E501
        :type: list[object]
        """

        self._masters = masters

    @property
    def notified_serial(self):
        """Gets the notified_serial of this DnsZoneRecordObject.  # noqa: E501


        :return: The notified_serial of this DnsZoneRecordObject.  # noqa: E501
        :rtype: int
        """
        return self._notified_serial

    @notified_serial.setter
    def notified_serial(self, notified_serial):
        """Sets the notified_serial of this DnsZoneRecordObject.


        :param notified_serial: The notified_serial of this DnsZoneRecordObject.  # noqa: E501
        :type: int
        """

        self._notified_serial = notified_serial

    @property
    def rrsets(self):
        """Gets the rrsets of this DnsZoneRecordObject.  # noqa: E501

        array of records  # noqa: E501

        :return: The rrsets of this DnsZoneRecordObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._rrsets

    @rrsets.setter
    def rrsets(self, rrsets):
        """Sets the rrsets of this DnsZoneRecordObject.

        array of records  # noqa: E501

        :param rrsets: The rrsets of this DnsZoneRecordObject.  # noqa: E501
        :type: list[object]
        """

        self._rrsets = rrsets

    @property
    def serial(self):
        """Gets the serial of this DnsZoneRecordObject.  # noqa: E501


        :return: The serial of this DnsZoneRecordObject.  # noqa: E501
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this DnsZoneRecordObject.


        :param serial: The serial of this DnsZoneRecordObject.  # noqa: E501
        :type: int
        """

        self._serial = serial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DnsZoneRecordObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DnsZoneRecordObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
