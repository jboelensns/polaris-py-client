# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BgpNeighborProcessObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_as_in': 'int',
        'as_number': 'int',
        'description': 'str',
        'device_name': 'str',
        'ebgp_multi_hop': 'int',
        'export_policy': 'str',
        'import_policy': 'str',
        'ip_address': 'str',
        'is_allow_as_in': 'bool',
        'is_default_originate': 'bool',
        'is_ebgp_multi_hop': 'bool',
        'is_enabled': 'bool',
        'is_next_hop_self': 'bool',
        'is_peer_group': 'bool',
        'is_remove_private_as': 'bool',
        'is_send_community': 'bool',
        'maximum_routes': 'int',
        'password_hash': 'str',
        'peer_group': 'str',
        'remote_as': 'str',
        'update_source': 'str',
        'vrf': 'str'
    }

    attribute_map = {
        'allow_as_in': 'allow_as_in',
        'as_number': 'as_number',
        'description': 'description',
        'device_name': 'device_name',
        'ebgp_multi_hop': 'ebgp_multi_hop',
        'export_policy': 'export_policy',
        'import_policy': 'import_policy',
        'ip_address': 'ip_address',
        'is_allow_as_in': 'is_allow_as_in',
        'is_default_originate': 'is_default_originate',
        'is_ebgp_multi_hop': 'is_ebgp_multi_hop',
        'is_enabled': 'is_enabled',
        'is_next_hop_self': 'is_next_hop_self',
        'is_peer_group': 'is_peer_group',
        'is_remove_private_as': 'is_remove_private_as',
        'is_send_community': 'is_send_community',
        'maximum_routes': 'maximum_routes',
        'password_hash': 'password_hash',
        'peer_group': 'peer_group',
        'remote_as': 'remote_as',
        'update_source': 'update_source',
        'vrf': 'vrf'
    }

    def __init__(self, allow_as_in=None, as_number=None, description=None, device_name=None, ebgp_multi_hop=None, export_policy=None, import_policy=None, ip_address=None, is_allow_as_in=None, is_default_originate=None, is_ebgp_multi_hop=None, is_enabled=None, is_next_hop_self=None, is_peer_group=None, is_remove_private_as=None, is_send_community=None, maximum_routes=None, password_hash=None, peer_group=None, remote_as=None, update_source=None, vrf=None):  # noqa: E501
        """BgpNeighborProcessObject - a model defined in Swagger"""  # noqa: E501

        self._allow_as_in = None
        self._as_number = None
        self._description = None
        self._device_name = None
        self._ebgp_multi_hop = None
        self._export_policy = None
        self._import_policy = None
        self._ip_address = None
        self._is_allow_as_in = None
        self._is_default_originate = None
        self._is_ebgp_multi_hop = None
        self._is_enabled = None
        self._is_next_hop_self = None
        self._is_peer_group = None
        self._is_remove_private_as = None
        self._is_send_community = None
        self._maximum_routes = None
        self._password_hash = None
        self._peer_group = None
        self._remote_as = None
        self._update_source = None
        self._vrf = None
        self.discriminator = None

        if allow_as_in is not None:
            self.allow_as_in = allow_as_in
        self.as_number = as_number
        if description is not None:
            self.description = description
        self.device_name = device_name
        if ebgp_multi_hop is not None:
            self.ebgp_multi_hop = ebgp_multi_hop
        if export_policy is not None:
            self.export_policy = export_policy
        if import_policy is not None:
            self.import_policy = import_policy
        self.ip_address = ip_address
        if is_allow_as_in is not None:
            self.is_allow_as_in = is_allow_as_in
        if is_default_originate is not None:
            self.is_default_originate = is_default_originate
        if is_ebgp_multi_hop is not None:
            self.is_ebgp_multi_hop = is_ebgp_multi_hop
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_next_hop_self is not None:
            self.is_next_hop_self = is_next_hop_self
        if is_peer_group is not None:
            self.is_peer_group = is_peer_group
        if is_remove_private_as is not None:
            self.is_remove_private_as = is_remove_private_as
        if is_send_community is not None:
            self.is_send_community = is_send_community
        if maximum_routes is not None:
            self.maximum_routes = maximum_routes
        if password_hash is not None:
            self.password_hash = password_hash
        if peer_group is not None:
            self.peer_group = peer_group
        self.remote_as = remote_as
        if update_source is not None:
            self.update_source = update_source
        if vrf is not None:
            self.vrf = vrf

    @property
    def allow_as_in(self):
        """Gets the allow_as_in of this BgpNeighborProcessObject.  # noqa: E501

        Permit number of advertised prefixes containing duplicate ASNs into the routing domain  # noqa: E501

        :return: The allow_as_in of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: int
        """
        return self._allow_as_in

    @allow_as_in.setter
    def allow_as_in(self, allow_as_in):
        """Sets the allow_as_in of this BgpNeighborProcessObject.

        Permit number of advertised prefixes containing duplicate ASNs into the routing domain  # noqa: E501

        :param allow_as_in: The allow_as_in of this BgpNeighborProcessObject.  # noqa: E501
        :type: int
        """

        self._allow_as_in = allow_as_in

    @property
    def as_number(self):
        """Gets the as_number of this BgpNeighborProcessObject.  # noqa: E501

        Local ASN  # noqa: E501

        :return: The as_number of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: int
        """
        return self._as_number

    @as_number.setter
    def as_number(self, as_number):
        """Sets the as_number of this BgpNeighborProcessObject.

        Local ASN  # noqa: E501

        :param as_number: The as_number of this BgpNeighborProcessObject.  # noqa: E501
        :type: int
        """
        if as_number is None:
            raise ValueError("Invalid value for `as_number`, must not be `None`")  # noqa: E501

        self._as_number = as_number

    @property
    def description(self):
        """Gets the description of this BgpNeighborProcessObject.  # noqa: E501


        :return: The description of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BgpNeighborProcessObject.


        :param description: The description of this BgpNeighborProcessObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_name(self):
        """Gets the device_name of this BgpNeighborProcessObject.  # noqa: E501

        Device name  # noqa: E501

        :return: The device_name of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this BgpNeighborProcessObject.

        Device name  # noqa: E501

        :param device_name: The device_name of this BgpNeighborProcessObject.  # noqa: E501
        :type: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")  # noqa: E501

        self._device_name = device_name

    @property
    def ebgp_multi_hop(self):
        """Gets the ebgp_multi_hop of this BgpNeighborProcessObject.  # noqa: E501


        :return: The ebgp_multi_hop of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: int
        """
        return self._ebgp_multi_hop

    @ebgp_multi_hop.setter
    def ebgp_multi_hop(self, ebgp_multi_hop):
        """Sets the ebgp_multi_hop of this BgpNeighborProcessObject.


        :param ebgp_multi_hop: The ebgp_multi_hop of this BgpNeighborProcessObject.  # noqa: E501
        :type: int
        """

        self._ebgp_multi_hop = ebgp_multi_hop

    @property
    def export_policy(self):
        """Gets the export_policy of this BgpNeighborProcessObject.  # noqa: E501

        BgpRouteMap policy  # noqa: E501

        :return: The export_policy of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: str
        """
        return self._export_policy

    @export_policy.setter
    def export_policy(self, export_policy):
        """Sets the export_policy of this BgpNeighborProcessObject.

        BgpRouteMap policy  # noqa: E501

        :param export_policy: The export_policy of this BgpNeighborProcessObject.  # noqa: E501
        :type: str
        """

        self._export_policy = export_policy

    @property
    def import_policy(self):
        """Gets the import_policy of this BgpNeighborProcessObject.  # noqa: E501

        BgpRouteMap policy  # noqa: E501

        :return: The import_policy of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: str
        """
        return self._import_policy

    @import_policy.setter
    def import_policy(self, import_policy):
        """Sets the import_policy of this BgpNeighborProcessObject.

        BgpRouteMap policy  # noqa: E501

        :param import_policy: The import_policy of this BgpNeighborProcessObject.  # noqa: E501
        :type: str
        """

        self._import_policy = import_policy

    @property
    def ip_address(self):
        """Gets the ip_address of this BgpNeighborProcessObject.  # noqa: E501

        ip address of neighbor  # noqa: E501

        :return: The ip_address of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this BgpNeighborProcessObject.

        ip address of neighbor  # noqa: E501

        :param ip_address: The ip_address of this BgpNeighborProcessObject.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def is_allow_as_in(self):
        """Gets the is_allow_as_in of this BgpNeighborProcessObject.  # noqa: E501


        :return: The is_allow_as_in of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_as_in

    @is_allow_as_in.setter
    def is_allow_as_in(self, is_allow_as_in):
        """Sets the is_allow_as_in of this BgpNeighborProcessObject.


        :param is_allow_as_in: The is_allow_as_in of this BgpNeighborProcessObject.  # noqa: E501
        :type: bool
        """

        self._is_allow_as_in = is_allow_as_in

    @property
    def is_default_originate(self):
        """Gets the is_default_originate of this BgpNeighborProcessObject.  # noqa: E501


        :return: The is_default_originate of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_default_originate

    @is_default_originate.setter
    def is_default_originate(self, is_default_originate):
        """Sets the is_default_originate of this BgpNeighborProcessObject.


        :param is_default_originate: The is_default_originate of this BgpNeighborProcessObject.  # noqa: E501
        :type: bool
        """

        self._is_default_originate = is_default_originate

    @property
    def is_ebgp_multi_hop(self):
        """Gets the is_ebgp_multi_hop of this BgpNeighborProcessObject.  # noqa: E501


        :return: The is_ebgp_multi_hop of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_ebgp_multi_hop

    @is_ebgp_multi_hop.setter
    def is_ebgp_multi_hop(self, is_ebgp_multi_hop):
        """Sets the is_ebgp_multi_hop of this BgpNeighborProcessObject.


        :param is_ebgp_multi_hop: The is_ebgp_multi_hop of this BgpNeighborProcessObject.  # noqa: E501
        :type: bool
        """

        self._is_ebgp_multi_hop = is_ebgp_multi_hop

    @property
    def is_enabled(self):
        """Gets the is_enabled of this BgpNeighborProcessObject.  # noqa: E501


        :return: The is_enabled of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this BgpNeighborProcessObject.


        :param is_enabled: The is_enabled of this BgpNeighborProcessObject.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_next_hop_self(self):
        """Gets the is_next_hop_self of this BgpNeighborProcessObject.  # noqa: E501


        :return: The is_next_hop_self of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_next_hop_self

    @is_next_hop_self.setter
    def is_next_hop_self(self, is_next_hop_self):
        """Sets the is_next_hop_self of this BgpNeighborProcessObject.


        :param is_next_hop_self: The is_next_hop_self of this BgpNeighborProcessObject.  # noqa: E501
        :type: bool
        """

        self._is_next_hop_self = is_next_hop_self

    @property
    def is_peer_group(self):
        """Gets the is_peer_group of this BgpNeighborProcessObject.  # noqa: E501


        :return: The is_peer_group of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_peer_group

    @is_peer_group.setter
    def is_peer_group(self, is_peer_group):
        """Sets the is_peer_group of this BgpNeighborProcessObject.


        :param is_peer_group: The is_peer_group of this BgpNeighborProcessObject.  # noqa: E501
        :type: bool
        """

        self._is_peer_group = is_peer_group

    @property
    def is_remove_private_as(self):
        """Gets the is_remove_private_as of this BgpNeighborProcessObject.  # noqa: E501


        :return: The is_remove_private_as of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_remove_private_as

    @is_remove_private_as.setter
    def is_remove_private_as(self, is_remove_private_as):
        """Sets the is_remove_private_as of this BgpNeighborProcessObject.


        :param is_remove_private_as: The is_remove_private_as of this BgpNeighborProcessObject.  # noqa: E501
        :type: bool
        """

        self._is_remove_private_as = is_remove_private_as

    @property
    def is_send_community(self):
        """Gets the is_send_community of this BgpNeighborProcessObject.  # noqa: E501


        :return: The is_send_community of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_send_community

    @is_send_community.setter
    def is_send_community(self, is_send_community):
        """Sets the is_send_community of this BgpNeighborProcessObject.


        :param is_send_community: The is_send_community of this BgpNeighborProcessObject.  # noqa: E501
        :type: bool
        """

        self._is_send_community = is_send_community

    @property
    def maximum_routes(self):
        """Gets the maximum_routes of this BgpNeighborProcessObject.  # noqa: E501

        Maximum number of routes accepted from neighbor  # noqa: E501

        :return: The maximum_routes of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: int
        """
        return self._maximum_routes

    @maximum_routes.setter
    def maximum_routes(self, maximum_routes):
        """Sets the maximum_routes of this BgpNeighborProcessObject.

        Maximum number of routes accepted from neighbor  # noqa: E501

        :param maximum_routes: The maximum_routes of this BgpNeighborProcessObject.  # noqa: E501
        :type: int
        """

        self._maximum_routes = maximum_routes

    @property
    def password_hash(self):
        """Gets the password_hash of this BgpNeighborProcessObject.  # noqa: E501


        :return: The password_hash of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: str
        """
        return self._password_hash

    @password_hash.setter
    def password_hash(self, password_hash):
        """Sets the password_hash of this BgpNeighborProcessObject.


        :param password_hash: The password_hash of this BgpNeighborProcessObject.  # noqa: E501
        :type: str
        """

        self._password_hash = password_hash

    @property
    def peer_group(self):
        """Gets the peer_group of this BgpNeighborProcessObject.  # noqa: E501


        :return: The peer_group of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: str
        """
        return self._peer_group

    @peer_group.setter
    def peer_group(self, peer_group):
        """Sets the peer_group of this BgpNeighborProcessObject.


        :param peer_group: The peer_group of this BgpNeighborProcessObject.  # noqa: E501
        :type: str
        """

        self._peer_group = peer_group

    @property
    def remote_as(self):
        """Gets the remote_as of this BgpNeighborProcessObject.  # noqa: E501

        ASN of neighbor  # noqa: E501

        :return: The remote_as of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: str
        """
        return self._remote_as

    @remote_as.setter
    def remote_as(self, remote_as):
        """Sets the remote_as of this BgpNeighborProcessObject.

        ASN of neighbor  # noqa: E501

        :param remote_as: The remote_as of this BgpNeighborProcessObject.  # noqa: E501
        :type: str
        """
        if remote_as is None:
            raise ValueError("Invalid value for `remote_as`, must not be `None`")  # noqa: E501

        self._remote_as = remote_as

    @property
    def update_source(self):
        """Gets the update_source of this BgpNeighborProcessObject.  # noqa: E501

        Specify source interface for BGP neighbor TCP connection  # noqa: E501

        :return: The update_source of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: str
        """
        return self._update_source

    @update_source.setter
    def update_source(self, update_source):
        """Sets the update_source of this BgpNeighborProcessObject.

        Specify source interface for BGP neighbor TCP connection  # noqa: E501

        :param update_source: The update_source of this BgpNeighborProcessObject.  # noqa: E501
        :type: str
        """

        self._update_source = update_source

    @property
    def vrf(self):
        """Gets the vrf of this BgpNeighborProcessObject.  # noqa: E501


        :return: The vrf of this BgpNeighborProcessObject.  # noqa: E501
        :rtype: str
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this BgpNeighborProcessObject.


        :param vrf: The vrf of this BgpNeighborProcessObject.  # noqa: E501
        :type: str
        """

        self._vrf = vrf

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BgpNeighborProcessObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpNeighborProcessObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
