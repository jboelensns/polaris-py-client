# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Interface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fqdn': 'str',
        'ip_address': 'str',
        'ip_gateway': 'str',
        'ip_netmask': 'str',
        'name': 'str',
        'num_vfs': 'int',
        'secondary_ips': 'int',
        'type': 'str',
        'vlan': 'int',
        'vlan_tagged': 'bool'
    }

    attribute_map = {
        'fqdn': 'fqdn',
        'ip_address': 'ip_address',
        'ip_gateway': 'ip_gateway',
        'ip_netmask': 'ip_netmask',
        'name': 'name',
        'num_vfs': 'num_vfs',
        'secondary_ips': 'secondary_ips',
        'type': 'type',
        'vlan': 'vlan',
        'vlan_tagged': 'vlan_tagged'
    }

    def __init__(self, fqdn=None, ip_address=None, ip_gateway=None, ip_netmask=None, name=None, num_vfs=None, secondary_ips=None, type='bridged', vlan=None, vlan_tagged=True):  # noqa: E501
        """Interface - a model defined in Swagger"""  # noqa: E501

        self._fqdn = None
        self._ip_address = None
        self._ip_gateway = None
        self._ip_netmask = None
        self._name = None
        self._num_vfs = None
        self._secondary_ips = None
        self._type = None
        self._vlan = None
        self._vlan_tagged = None
        self.discriminator = None

        if fqdn is not None:
            self.fqdn = fqdn
        if ip_address is not None:
            self.ip_address = ip_address
        if ip_gateway is not None:
            self.ip_gateway = ip_gateway
        if ip_netmask is not None:
            self.ip_netmask = ip_netmask
        if name is not None:
            self.name = name
        if num_vfs is not None:
            self.num_vfs = num_vfs
        if secondary_ips is not None:
            self.secondary_ips = secondary_ips
        if type is not None:
            self.type = type
        if vlan is not None:
            self.vlan = vlan
        if vlan_tagged is not None:
            self.vlan_tagged = vlan_tagged

    @property
    def fqdn(self):
        """Gets the fqdn of this Interface.  # noqa: E501


        :return: The fqdn of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this Interface.


        :param fqdn: The fqdn of this Interface.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def ip_address(self):
        """Gets the ip_address of this Interface.  # noqa: E501


        :return: The ip_address of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Interface.


        :param ip_address: The ip_address of this Interface.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def ip_gateway(self):
        """Gets the ip_gateway of this Interface.  # noqa: E501


        :return: The ip_gateway of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._ip_gateway

    @ip_gateway.setter
    def ip_gateway(self, ip_gateway):
        """Sets the ip_gateway of this Interface.


        :param ip_gateway: The ip_gateway of this Interface.  # noqa: E501
        :type: str
        """

        self._ip_gateway = ip_gateway

    @property
    def ip_netmask(self):
        """Gets the ip_netmask of this Interface.  # noqa: E501


        :return: The ip_netmask of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._ip_netmask

    @ip_netmask.setter
    def ip_netmask(self, ip_netmask):
        """Sets the ip_netmask of this Interface.


        :param ip_netmask: The ip_netmask of this Interface.  # noqa: E501
        :type: str
        """

        self._ip_netmask = ip_netmask

    @property
    def name(self):
        """Gets the name of this Interface.  # noqa: E501


        :return: The name of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Interface.


        :param name: The name of this Interface.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_vfs(self):
        """Gets the num_vfs of this Interface.  # noqa: E501


        :return: The num_vfs of this Interface.  # noqa: E501
        :rtype: int
        """
        return self._num_vfs

    @num_vfs.setter
    def num_vfs(self, num_vfs):
        """Sets the num_vfs of this Interface.


        :param num_vfs: The num_vfs of this Interface.  # noqa: E501
        :type: int
        """

        self._num_vfs = num_vfs

    @property
    def secondary_ips(self):
        """Gets the secondary_ips of this Interface.  # noqa: E501


        :return: The secondary_ips of this Interface.  # noqa: E501
        :rtype: int
        """
        return self._secondary_ips

    @secondary_ips.setter
    def secondary_ips(self, secondary_ips):
        """Sets the secondary_ips of this Interface.


        :param secondary_ips: The secondary_ips of this Interface.  # noqa: E501
        :type: int
        """

        self._secondary_ips = secondary_ips

    @property
    def type(self):
        """Gets the type of this Interface.  # noqa: E501


        :return: The type of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Interface.


        :param type: The type of this Interface.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vlan(self):
        """Gets the vlan of this Interface.  # noqa: E501


        :return: The vlan of this Interface.  # noqa: E501
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this Interface.


        :param vlan: The vlan of this Interface.  # noqa: E501
        :type: int
        """

        self._vlan = vlan

    @property
    def vlan_tagged(self):
        """Gets the vlan_tagged of this Interface.  # noqa: E501


        :return: The vlan_tagged of this Interface.  # noqa: E501
        :rtype: bool
        """
        return self._vlan_tagged

    @vlan_tagged.setter
    def vlan_tagged(self, vlan_tagged):
        """Sets the vlan_tagged of this Interface.


        :param vlan_tagged: The vlan_tagged of this Interface.  # noqa: E501
        :type: bool
        """

        self._vlan_tagged = vlan_tagged

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Interface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Interface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
