# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceChangeObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'announce_slack': 'bool',
        'change_id': 'str',
        'commit': 'bool'
    }

    attribute_map = {
        'announce_slack': 'announce_slack',
        'change_id': 'change_id',
        'commit': 'commit'
    }

    def __init__(self, announce_slack=False, change_id=None, commit=False):  # noqa: E501
        """DeviceChangeObject - a model defined in Swagger"""  # noqa: E501

        self._announce_slack = None
        self._change_id = None
        self._commit = None
        self.discriminator = None

        if announce_slack is not None:
            self.announce_slack = announce_slack
        self.change_id = change_id
        self.commit = commit

    @property
    def announce_slack(self):
        """Gets the announce_slack of this DeviceChangeObject.  # noqa: E501

        Announce to slack channel change id start/stop  # noqa: E501

        :return: The announce_slack of this DeviceChangeObject.  # noqa: E501
        :rtype: bool
        """
        return self._announce_slack

    @announce_slack.setter
    def announce_slack(self, announce_slack):
        """Sets the announce_slack of this DeviceChangeObject.

        Announce to slack channel change id start/stop  # noqa: E501

        :param announce_slack: The announce_slack of this DeviceChangeObject.  # noqa: E501
        :type: bool
        """

        self._announce_slack = announce_slack

    @property
    def change_id(self):
        """Gets the change_id of this DeviceChangeObject.  # noqa: E501

        Change id  # noqa: E501

        :return: The change_id of this DeviceChangeObject.  # noqa: E501
        :rtype: str
        """
        return self._change_id

    @change_id.setter
    def change_id(self, change_id):
        """Sets the change_id of this DeviceChangeObject.

        Change id  # noqa: E501

        :param change_id: The change_id of this DeviceChangeObject.  # noqa: E501
        :type: str
        """
        if change_id is None:
            raise ValueError("Invalid value for `change_id`, must not be `None`")  # noqa: E501

        self._change_id = change_id

    @property
    def commit(self):
        """Gets the commit of this DeviceChangeObject.  # noqa: E501


        :return: The commit of this DeviceChangeObject.  # noqa: E501
        :rtype: bool
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this DeviceChangeObject.


        :param commit: The commit of this DeviceChangeObject.  # noqa: E501
        :type: bool
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")  # noqa: E501

        self._commit = commit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceChangeObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceChangeObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
