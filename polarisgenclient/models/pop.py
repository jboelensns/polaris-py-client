# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Pop(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'airport_code': 'str',
        'can_provision': 'bool',
        'city': 'str',
        'country_code': 'str',
        'created_at': 'str',
        'description': 'str',
        'is_dp': 'bool',
        'is_enabled': 'bool',
        'is_mp': 'bool',
        'latitude': 'float',
        'longitude': 'float',
        'name': 'str',
        'network_revision': 'str',
        'region': 'str',
        'status': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'address': 'address',
        'airport_code': 'airport_code',
        'can_provision': 'can_provision',
        'city': 'city',
        'country_code': 'country_code',
        'created_at': 'created_at',
        'description': 'description',
        'is_dp': 'is_dp',
        'is_enabled': 'is_enabled',
        'is_mp': 'is_mp',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'name': 'name',
        'network_revision': 'network_revision',
        'region': 'region',
        'status': 'status',
        'vendor': 'vendor'
    }

    def __init__(self, address=None, airport_code=None, can_provision=None, city=None, country_code=None, created_at=None, description=None, is_dp=None, is_enabled=None, is_mp=None, latitude=None, longitude=None, name=None, network_revision=None, region=None, status=None, vendor=None):  # noqa: E501
        """Pop - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._airport_code = None
        self._can_provision = None
        self._city = None
        self._country_code = None
        self._created_at = None
        self._description = None
        self._is_dp = None
        self._is_enabled = None
        self._is_mp = None
        self._latitude = None
        self._longitude = None
        self._name = None
        self._network_revision = None
        self._region = None
        self._status = None
        self._vendor = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if airport_code is not None:
            self.airport_code = airport_code
        if can_provision is not None:
            self.can_provision = can_provision
        if city is not None:
            self.city = city
        if country_code is not None:
            self.country_code = country_code
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if is_dp is not None:
            self.is_dp = is_dp
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_mp is not None:
            self.is_mp = is_mp
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if name is not None:
            self.name = name
        if network_revision is not None:
            self.network_revision = network_revision
        if region is not None:
            self.region = region
        if status is not None:
            self.status = status
        if vendor is not None:
            self.vendor = vendor

    @property
    def address(self):
        """Gets the address of this Pop.  # noqa: E501


        :return: The address of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Pop.


        :param address: The address of this Pop.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def airport_code(self):
        """Gets the airport_code of this Pop.  # noqa: E501


        :return: The airport_code of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._airport_code

    @airport_code.setter
    def airport_code(self, airport_code):
        """Sets the airport_code of this Pop.


        :param airport_code: The airport_code of this Pop.  # noqa: E501
        :type: str
        """

        self._airport_code = airport_code

    @property
    def can_provision(self):
        """Gets the can_provision of this Pop.  # noqa: E501


        :return: The can_provision of this Pop.  # noqa: E501
        :rtype: bool
        """
        return self._can_provision

    @can_provision.setter
    def can_provision(self, can_provision):
        """Sets the can_provision of this Pop.


        :param can_provision: The can_provision of this Pop.  # noqa: E501
        :type: bool
        """

        self._can_provision = can_provision

    @property
    def city(self):
        """Gets the city of this Pop.  # noqa: E501


        :return: The city of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Pop.


        :param city: The city of this Pop.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this Pop.  # noqa: E501


        :return: The country_code of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Pop.


        :param country_code: The country_code of this Pop.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def created_at(self):
        """Gets the created_at of this Pop.  # noqa: E501


        :return: The created_at of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Pop.


        :param created_at: The created_at of this Pop.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Pop.  # noqa: E501


        :return: The description of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Pop.


        :param description: The description of this Pop.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_dp(self):
        """Gets the is_dp of this Pop.  # noqa: E501


        :return: The is_dp of this Pop.  # noqa: E501
        :rtype: bool
        """
        return self._is_dp

    @is_dp.setter
    def is_dp(self, is_dp):
        """Sets the is_dp of this Pop.


        :param is_dp: The is_dp of this Pop.  # noqa: E501
        :type: bool
        """

        self._is_dp = is_dp

    @property
    def is_enabled(self):
        """Gets the is_enabled of this Pop.  # noqa: E501


        :return: The is_enabled of this Pop.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this Pop.


        :param is_enabled: The is_enabled of this Pop.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_mp(self):
        """Gets the is_mp of this Pop.  # noqa: E501


        :return: The is_mp of this Pop.  # noqa: E501
        :rtype: bool
        """
        return self._is_mp

    @is_mp.setter
    def is_mp(self, is_mp):
        """Sets the is_mp of this Pop.


        :param is_mp: The is_mp of this Pop.  # noqa: E501
        :type: bool
        """

        self._is_mp = is_mp

    @property
    def latitude(self):
        """Gets the latitude of this Pop.  # noqa: E501


        :return: The latitude of this Pop.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Pop.


        :param latitude: The latitude of this Pop.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Pop.  # noqa: E501


        :return: The longitude of this Pop.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Pop.


        :param longitude: The longitude of this Pop.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this Pop.  # noqa: E501


        :return: The name of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pop.


        :param name: The name of this Pop.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_revision(self):
        """Gets the network_revision of this Pop.  # noqa: E501


        :return: The network_revision of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._network_revision

    @network_revision.setter
    def network_revision(self, network_revision):
        """Sets the network_revision of this Pop.


        :param network_revision: The network_revision of this Pop.  # noqa: E501
        :type: str
        """

        self._network_revision = network_revision

    @property
    def region(self):
        """Gets the region of this Pop.  # noqa: E501


        :return: The region of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Pop.


        :param region: The region of this Pop.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def status(self):
        """Gets the status of this Pop.  # noqa: E501


        :return: The status of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Pop.


        :param status: The status of this Pop.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def vendor(self):
        """Gets the vendor of this Pop.  # noqa: E501


        :return: The vendor of this Pop.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Pop.


        :param vendor: The vendor of this Pop.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pop, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pop):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
