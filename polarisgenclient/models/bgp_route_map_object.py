# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BgpRouteMapObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_action': 'str',
        'from_tag': 'str',
        'ip_filter_id': 'str',
        'is_enabled': 'bool',
        'is_family_inet_v4': 'bool',
        'is_family_inet_v6': 'bool',
        'is_match_prefix_list': 'bool',
        'is_match_protocol_bgp': 'bool',
        'is_match_protocol_connected': 'bool',
        'is_match_protocol_ospf_v2': 'bool',
        'is_match_protocol_ospf_v3': 'bool',
        'is_match_protocol_static': 'bool',
        'is_match_route_filter': 'bool',
        'is_then_deny': 'bool',
        'is_then_permit': 'bool',
        'route_map_id': 'str',
        'seq': 'int',
        'seq_name': 'str',
        'then_action_as_prepend': 'str',
        'then_local_preference': 'int',
        'then_seq': 'int',
        'then_seq_name': 'str'
    }

    attribute_map = {
        'from_action': 'from_action',
        'from_tag': 'from_tag',
        'ip_filter_id': 'ip_filter_id',
        'is_enabled': 'is_enabled',
        'is_family_inet_v4': 'is_family_inet_v4',
        'is_family_inet_v6': 'is_family_inet_v6',
        'is_match_prefix_list': 'is_match_prefix_list',
        'is_match_protocol_bgp': 'is_match_protocol_bgp',
        'is_match_protocol_connected': 'is_match_protocol_connected',
        'is_match_protocol_ospf_v2': 'is_match_protocol_ospf_v2',
        'is_match_protocol_ospf_v3': 'is_match_protocol_ospf_v3',
        'is_match_protocol_static': 'is_match_protocol_static',
        'is_match_route_filter': 'is_match_route_filter',
        'is_then_deny': 'is_then_deny',
        'is_then_permit': 'is_then_permit',
        'route_map_id': 'route_map_id',
        'seq': 'seq',
        'seq_name': 'seq_name',
        'then_action_as_prepend': 'then_action_as_prepend',
        'then_local_preference': 'then_local_preference',
        'then_seq': 'then_seq',
        'then_seq_name': 'then_seq_name'
    }

    def __init__(self, from_action=None, from_tag=None, ip_filter_id=None, is_enabled=None, is_family_inet_v4=None, is_family_inet_v6=None, is_match_prefix_list=None, is_match_protocol_bgp=None, is_match_protocol_connected=None, is_match_protocol_ospf_v2=None, is_match_protocol_ospf_v3=None, is_match_protocol_static=None, is_match_route_filter=None, is_then_deny=None, is_then_permit=None, route_map_id=None, seq=None, seq_name=None, then_action_as_prepend=None, then_local_preference=None, then_seq=None, then_seq_name=None):  # noqa: E501
        """BgpRouteMapObject - a model defined in Swagger"""  # noqa: E501

        self._from_action = None
        self._from_tag = None
        self._ip_filter_id = None
        self._is_enabled = None
        self._is_family_inet_v4 = None
        self._is_family_inet_v6 = None
        self._is_match_prefix_list = None
        self._is_match_protocol_bgp = None
        self._is_match_protocol_connected = None
        self._is_match_protocol_ospf_v2 = None
        self._is_match_protocol_ospf_v3 = None
        self._is_match_protocol_static = None
        self._is_match_route_filter = None
        self._is_then_deny = None
        self._is_then_permit = None
        self._route_map_id = None
        self._seq = None
        self._seq_name = None
        self._then_action_as_prepend = None
        self._then_local_preference = None
        self._then_seq = None
        self._then_seq_name = None
        self.discriminator = None

        if from_action is not None:
            self.from_action = from_action
        if from_tag is not None:
            self.from_tag = from_tag
        self.ip_filter_id = ip_filter_id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_family_inet_v4 is not None:
            self.is_family_inet_v4 = is_family_inet_v4
        if is_family_inet_v6 is not None:
            self.is_family_inet_v6 = is_family_inet_v6
        if is_match_prefix_list is not None:
            self.is_match_prefix_list = is_match_prefix_list
        if is_match_protocol_bgp is not None:
            self.is_match_protocol_bgp = is_match_protocol_bgp
        if is_match_protocol_connected is not None:
            self.is_match_protocol_connected = is_match_protocol_connected
        if is_match_protocol_ospf_v2 is not None:
            self.is_match_protocol_ospf_v2 = is_match_protocol_ospf_v2
        if is_match_protocol_ospf_v3 is not None:
            self.is_match_protocol_ospf_v3 = is_match_protocol_ospf_v3
        if is_match_protocol_static is not None:
            self.is_match_protocol_static = is_match_protocol_static
        if is_match_route_filter is not None:
            self.is_match_route_filter = is_match_route_filter
        if is_then_deny is not None:
            self.is_then_deny = is_then_deny
        if is_then_permit is not None:
            self.is_then_permit = is_then_permit
        self.route_map_id = route_map_id
        self.seq = seq
        self.seq_name = seq_name
        if then_action_as_prepend is not None:
            self.then_action_as_prepend = then_action_as_prepend
        if then_local_preference is not None:
            self.then_local_preference = then_local_preference
        if then_seq is not None:
            self.then_seq = then_seq
        if then_seq_name is not None:
            self.then_seq_name = then_seq_name

    @property
    def from_action(self):
        """Gets the from_action of this BgpRouteMapObject.  # noqa: E501


        :return: The from_action of this BgpRouteMapObject.  # noqa: E501
        :rtype: str
        """
        return self._from_action

    @from_action.setter
    def from_action(self, from_action):
        """Sets the from_action of this BgpRouteMapObject.


        :param from_action: The from_action of this BgpRouteMapObject.  # noqa: E501
        :type: str
        """

        self._from_action = from_action

    @property
    def from_tag(self):
        """Gets the from_tag of this BgpRouteMapObject.  # noqa: E501


        :return: The from_tag of this BgpRouteMapObject.  # noqa: E501
        :rtype: str
        """
        return self._from_tag

    @from_tag.setter
    def from_tag(self, from_tag):
        """Sets the from_tag of this BgpRouteMapObject.


        :param from_tag: The from_tag of this BgpRouteMapObject.  # noqa: E501
        :type: str
        """

        self._from_tag = from_tag

    @property
    def ip_filter_id(self):
        """Gets the ip_filter_id of this BgpRouteMapObject.  # noqa: E501

        UUID1 string  # noqa: E501

        :return: The ip_filter_id of this BgpRouteMapObject.  # noqa: E501
        :rtype: str
        """
        return self._ip_filter_id

    @ip_filter_id.setter
    def ip_filter_id(self, ip_filter_id):
        """Sets the ip_filter_id of this BgpRouteMapObject.

        UUID1 string  # noqa: E501

        :param ip_filter_id: The ip_filter_id of this BgpRouteMapObject.  # noqa: E501
        :type: str
        """
        if ip_filter_id is None:
            raise ValueError("Invalid value for `ip_filter_id`, must not be `None`")  # noqa: E501

        self._ip_filter_id = ip_filter_id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this BgpRouteMapObject.  # noqa: E501


        :return: The is_enabled of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this BgpRouteMapObject.


        :param is_enabled: The is_enabled of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_family_inet_v4(self):
        """Gets the is_family_inet_v4 of this BgpRouteMapObject.  # noqa: E501


        :return: The is_family_inet_v4 of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_family_inet_v4

    @is_family_inet_v4.setter
    def is_family_inet_v4(self, is_family_inet_v4):
        """Sets the is_family_inet_v4 of this BgpRouteMapObject.


        :param is_family_inet_v4: The is_family_inet_v4 of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_family_inet_v4 = is_family_inet_v4

    @property
    def is_family_inet_v6(self):
        """Gets the is_family_inet_v6 of this BgpRouteMapObject.  # noqa: E501


        :return: The is_family_inet_v6 of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_family_inet_v6

    @is_family_inet_v6.setter
    def is_family_inet_v6(self, is_family_inet_v6):
        """Sets the is_family_inet_v6 of this BgpRouteMapObject.


        :param is_family_inet_v6: The is_family_inet_v6 of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_family_inet_v6 = is_family_inet_v6

    @property
    def is_match_prefix_list(self):
        """Gets the is_match_prefix_list of this BgpRouteMapObject.  # noqa: E501


        :return: The is_match_prefix_list of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_match_prefix_list

    @is_match_prefix_list.setter
    def is_match_prefix_list(self, is_match_prefix_list):
        """Sets the is_match_prefix_list of this BgpRouteMapObject.


        :param is_match_prefix_list: The is_match_prefix_list of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_match_prefix_list = is_match_prefix_list

    @property
    def is_match_protocol_bgp(self):
        """Gets the is_match_protocol_bgp of this BgpRouteMapObject.  # noqa: E501


        :return: The is_match_protocol_bgp of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_match_protocol_bgp

    @is_match_protocol_bgp.setter
    def is_match_protocol_bgp(self, is_match_protocol_bgp):
        """Sets the is_match_protocol_bgp of this BgpRouteMapObject.


        :param is_match_protocol_bgp: The is_match_protocol_bgp of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_match_protocol_bgp = is_match_protocol_bgp

    @property
    def is_match_protocol_connected(self):
        """Gets the is_match_protocol_connected of this BgpRouteMapObject.  # noqa: E501


        :return: The is_match_protocol_connected of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_match_protocol_connected

    @is_match_protocol_connected.setter
    def is_match_protocol_connected(self, is_match_protocol_connected):
        """Sets the is_match_protocol_connected of this BgpRouteMapObject.


        :param is_match_protocol_connected: The is_match_protocol_connected of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_match_protocol_connected = is_match_protocol_connected

    @property
    def is_match_protocol_ospf_v2(self):
        """Gets the is_match_protocol_ospf_v2 of this BgpRouteMapObject.  # noqa: E501


        :return: The is_match_protocol_ospf_v2 of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_match_protocol_ospf_v2

    @is_match_protocol_ospf_v2.setter
    def is_match_protocol_ospf_v2(self, is_match_protocol_ospf_v2):
        """Sets the is_match_protocol_ospf_v2 of this BgpRouteMapObject.


        :param is_match_protocol_ospf_v2: The is_match_protocol_ospf_v2 of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_match_protocol_ospf_v2 = is_match_protocol_ospf_v2

    @property
    def is_match_protocol_ospf_v3(self):
        """Gets the is_match_protocol_ospf_v3 of this BgpRouteMapObject.  # noqa: E501


        :return: The is_match_protocol_ospf_v3 of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_match_protocol_ospf_v3

    @is_match_protocol_ospf_v3.setter
    def is_match_protocol_ospf_v3(self, is_match_protocol_ospf_v3):
        """Sets the is_match_protocol_ospf_v3 of this BgpRouteMapObject.


        :param is_match_protocol_ospf_v3: The is_match_protocol_ospf_v3 of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_match_protocol_ospf_v3 = is_match_protocol_ospf_v3

    @property
    def is_match_protocol_static(self):
        """Gets the is_match_protocol_static of this BgpRouteMapObject.  # noqa: E501


        :return: The is_match_protocol_static of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_match_protocol_static

    @is_match_protocol_static.setter
    def is_match_protocol_static(self, is_match_protocol_static):
        """Sets the is_match_protocol_static of this BgpRouteMapObject.


        :param is_match_protocol_static: The is_match_protocol_static of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_match_protocol_static = is_match_protocol_static

    @property
    def is_match_route_filter(self):
        """Gets the is_match_route_filter of this BgpRouteMapObject.  # noqa: E501


        :return: The is_match_route_filter of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_match_route_filter

    @is_match_route_filter.setter
    def is_match_route_filter(self, is_match_route_filter):
        """Sets the is_match_route_filter of this BgpRouteMapObject.


        :param is_match_route_filter: The is_match_route_filter of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_match_route_filter = is_match_route_filter

    @property
    def is_then_deny(self):
        """Gets the is_then_deny of this BgpRouteMapObject.  # noqa: E501


        :return: The is_then_deny of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_then_deny

    @is_then_deny.setter
    def is_then_deny(self, is_then_deny):
        """Sets the is_then_deny of this BgpRouteMapObject.


        :param is_then_deny: The is_then_deny of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_then_deny = is_then_deny

    @property
    def is_then_permit(self):
        """Gets the is_then_permit of this BgpRouteMapObject.  # noqa: E501


        :return: The is_then_permit of this BgpRouteMapObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_then_permit

    @is_then_permit.setter
    def is_then_permit(self, is_then_permit):
        """Sets the is_then_permit of this BgpRouteMapObject.


        :param is_then_permit: The is_then_permit of this BgpRouteMapObject.  # noqa: E501
        :type: bool
        """

        self._is_then_permit = is_then_permit

    @property
    def route_map_id(self):
        """Gets the route_map_id of this BgpRouteMapObject.  # noqa: E501

        UUID1 string  # noqa: E501

        :return: The route_map_id of this BgpRouteMapObject.  # noqa: E501
        :rtype: str
        """
        return self._route_map_id

    @route_map_id.setter
    def route_map_id(self, route_map_id):
        """Sets the route_map_id of this BgpRouteMapObject.

        UUID1 string  # noqa: E501

        :param route_map_id: The route_map_id of this BgpRouteMapObject.  # noqa: E501
        :type: str
        """
        if route_map_id is None:
            raise ValueError("Invalid value for `route_map_id`, must not be `None`")  # noqa: E501

        self._route_map_id = route_map_id

    @property
    def seq(self):
        """Gets the seq of this BgpRouteMapObject.  # noqa: E501


        :return: The seq of this BgpRouteMapObject.  # noqa: E501
        :rtype: int
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this BgpRouteMapObject.


        :param seq: The seq of this BgpRouteMapObject.  # noqa: E501
        :type: int
        """
        if seq is None:
            raise ValueError("Invalid value for `seq`, must not be `None`")  # noqa: E501

        self._seq = seq

    @property
    def seq_name(self):
        """Gets the seq_name of this BgpRouteMapObject.  # noqa: E501


        :return: The seq_name of this BgpRouteMapObject.  # noqa: E501
        :rtype: str
        """
        return self._seq_name

    @seq_name.setter
    def seq_name(self, seq_name):
        """Sets the seq_name of this BgpRouteMapObject.


        :param seq_name: The seq_name of this BgpRouteMapObject.  # noqa: E501
        :type: str
        """
        if seq_name is None:
            raise ValueError("Invalid value for `seq_name`, must not be `None`")  # noqa: E501

        self._seq_name = seq_name

    @property
    def then_action_as_prepend(self):
        """Gets the then_action_as_prepend of this BgpRouteMapObject.  # noqa: E501


        :return: The then_action_as_prepend of this BgpRouteMapObject.  # noqa: E501
        :rtype: str
        """
        return self._then_action_as_prepend

    @then_action_as_prepend.setter
    def then_action_as_prepend(self, then_action_as_prepend):
        """Sets the then_action_as_prepend of this BgpRouteMapObject.


        :param then_action_as_prepend: The then_action_as_prepend of this BgpRouteMapObject.  # noqa: E501
        :type: str
        """

        self._then_action_as_prepend = then_action_as_prepend

    @property
    def then_local_preference(self):
        """Gets the then_local_preference of this BgpRouteMapObject.  # noqa: E501


        :return: The then_local_preference of this BgpRouteMapObject.  # noqa: E501
        :rtype: int
        """
        return self._then_local_preference

    @then_local_preference.setter
    def then_local_preference(self, then_local_preference):
        """Sets the then_local_preference of this BgpRouteMapObject.


        :param then_local_preference: The then_local_preference of this BgpRouteMapObject.  # noqa: E501
        :type: int
        """

        self._then_local_preference = then_local_preference

    @property
    def then_seq(self):
        """Gets the then_seq of this BgpRouteMapObject.  # noqa: E501


        :return: The then_seq of this BgpRouteMapObject.  # noqa: E501
        :rtype: int
        """
        return self._then_seq

    @then_seq.setter
    def then_seq(self, then_seq):
        """Sets the then_seq of this BgpRouteMapObject.


        :param then_seq: The then_seq of this BgpRouteMapObject.  # noqa: E501
        :type: int
        """

        self._then_seq = then_seq

    @property
    def then_seq_name(self):
        """Gets the then_seq_name of this BgpRouteMapObject.  # noqa: E501


        :return: The then_seq_name of this BgpRouteMapObject.  # noqa: E501
        :rtype: str
        """
        return self._then_seq_name

    @then_seq_name.setter
    def then_seq_name(self, then_seq_name):
        """Sets the then_seq_name of this BgpRouteMapObject.


        :param then_seq_name: The then_seq_name of this BgpRouteMapObject.  # noqa: E501
        :type: str
        """

        self._then_seq_name = then_seq_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BgpRouteMapObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpRouteMapObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
