# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HypervisorObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_name': 'str',
        'dom_name': 'str',
        'guest_hostname': 'str',
        'guest_ip_addresses': 'list[object]',
        'guest_mtu': 'int',
        'guest_port': 'str',
        'guest_rx_bytes': 'int',
        'guest_rx_drop': 'int',
        'guest_rx_errors': 'int',
        'guest_rx_frame': 'int',
        'guest_rx_multicast': 'int',
        'guest_rx_packets': 'int',
        'guest_tx_bytes': 'int',
        'guest_tx_carrier': 'int',
        'guest_tx_drop': 'int',
        'guest_tx_errors': 'int',
        'guest_tx_packets': 'int',
        'mac_address': 'str',
        'port': 'str'
    }

    attribute_map = {
        'device_name': 'device_name',
        'dom_name': 'dom_name',
        'guest_hostname': 'guest_hostname',
        'guest_ip_addresses': 'guest_ip_addresses',
        'guest_mtu': 'guest_mtu',
        'guest_port': 'guest_port',
        'guest_rx_bytes': 'guest_rx_bytes',
        'guest_rx_drop': 'guest_rx_drop',
        'guest_rx_errors': 'guest_rx_errors',
        'guest_rx_frame': 'guest_rx_frame',
        'guest_rx_multicast': 'guest_rx_multicast',
        'guest_rx_packets': 'guest_rx_packets',
        'guest_tx_bytes': 'guest_tx_bytes',
        'guest_tx_carrier': 'guest_tx_carrier',
        'guest_tx_drop': 'guest_tx_drop',
        'guest_tx_errors': 'guest_tx_errors',
        'guest_tx_packets': 'guest_tx_packets',
        'mac_address': 'mac_address',
        'port': 'port'
    }

    def __init__(self, device_name=None, dom_name=None, guest_hostname=None, guest_ip_addresses=None, guest_mtu=None, guest_port=None, guest_rx_bytes=None, guest_rx_drop=None, guest_rx_errors=None, guest_rx_frame=None, guest_rx_multicast=None, guest_rx_packets=None, guest_tx_bytes=None, guest_tx_carrier=None, guest_tx_drop=None, guest_tx_errors=None, guest_tx_packets=None, mac_address=None, port=None):  # noqa: E501
        """HypervisorObject - a model defined in Swagger"""  # noqa: E501

        self._device_name = None
        self._dom_name = None
        self._guest_hostname = None
        self._guest_ip_addresses = None
        self._guest_mtu = None
        self._guest_port = None
        self._guest_rx_bytes = None
        self._guest_rx_drop = None
        self._guest_rx_errors = None
        self._guest_rx_frame = None
        self._guest_rx_multicast = None
        self._guest_rx_packets = None
        self._guest_tx_bytes = None
        self._guest_tx_carrier = None
        self._guest_tx_drop = None
        self._guest_tx_errors = None
        self._guest_tx_packets = None
        self._mac_address = None
        self._port = None
        self.discriminator = None

        self.device_name = device_name
        if dom_name is not None:
            self.dom_name = dom_name
        if guest_hostname is not None:
            self.guest_hostname = guest_hostname
        if guest_ip_addresses is not None:
            self.guest_ip_addresses = guest_ip_addresses
        if guest_mtu is not None:
            self.guest_mtu = guest_mtu
        if guest_port is not None:
            self.guest_port = guest_port
        if guest_rx_bytes is not None:
            self.guest_rx_bytes = guest_rx_bytes
        if guest_rx_drop is not None:
            self.guest_rx_drop = guest_rx_drop
        if guest_rx_errors is not None:
            self.guest_rx_errors = guest_rx_errors
        if guest_rx_frame is not None:
            self.guest_rx_frame = guest_rx_frame
        if guest_rx_multicast is not None:
            self.guest_rx_multicast = guest_rx_multicast
        if guest_rx_packets is not None:
            self.guest_rx_packets = guest_rx_packets
        if guest_tx_bytes is not None:
            self.guest_tx_bytes = guest_tx_bytes
        if guest_tx_carrier is not None:
            self.guest_tx_carrier = guest_tx_carrier
        if guest_tx_drop is not None:
            self.guest_tx_drop = guest_tx_drop
        if guest_tx_errors is not None:
            self.guest_tx_errors = guest_tx_errors
        if guest_tx_packets is not None:
            self.guest_tx_packets = guest_tx_packets
        self.mac_address = mac_address
        self.port = port

    @property
    def device_name(self):
        """Gets the device_name of this HypervisorObject.  # noqa: E501


        :return: The device_name of this HypervisorObject.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this HypervisorObject.


        :param device_name: The device_name of this HypervisorObject.  # noqa: E501
        :type: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")  # noqa: E501

        self._device_name = device_name

    @property
    def dom_name(self):
        """Gets the dom_name of this HypervisorObject.  # noqa: E501


        :return: The dom_name of this HypervisorObject.  # noqa: E501
        :rtype: str
        """
        return self._dom_name

    @dom_name.setter
    def dom_name(self, dom_name):
        """Sets the dom_name of this HypervisorObject.


        :param dom_name: The dom_name of this HypervisorObject.  # noqa: E501
        :type: str
        """

        self._dom_name = dom_name

    @property
    def guest_hostname(self):
        """Gets the guest_hostname of this HypervisorObject.  # noqa: E501


        :return: The guest_hostname of this HypervisorObject.  # noqa: E501
        :rtype: str
        """
        return self._guest_hostname

    @guest_hostname.setter
    def guest_hostname(self, guest_hostname):
        """Sets the guest_hostname of this HypervisorObject.


        :param guest_hostname: The guest_hostname of this HypervisorObject.  # noqa: E501
        :type: str
        """

        self._guest_hostname = guest_hostname

    @property
    def guest_ip_addresses(self):
        """Gets the guest_ip_addresses of this HypervisorObject.  # noqa: E501


        :return: The guest_ip_addresses of this HypervisorObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._guest_ip_addresses

    @guest_ip_addresses.setter
    def guest_ip_addresses(self, guest_ip_addresses):
        """Sets the guest_ip_addresses of this HypervisorObject.


        :param guest_ip_addresses: The guest_ip_addresses of this HypervisorObject.  # noqa: E501
        :type: list[object]
        """

        self._guest_ip_addresses = guest_ip_addresses

    @property
    def guest_mtu(self):
        """Gets the guest_mtu of this HypervisorObject.  # noqa: E501


        :return: The guest_mtu of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_mtu

    @guest_mtu.setter
    def guest_mtu(self, guest_mtu):
        """Sets the guest_mtu of this HypervisorObject.


        :param guest_mtu: The guest_mtu of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_mtu = guest_mtu

    @property
    def guest_port(self):
        """Gets the guest_port of this HypervisorObject.  # noqa: E501


        :return: The guest_port of this HypervisorObject.  # noqa: E501
        :rtype: str
        """
        return self._guest_port

    @guest_port.setter
    def guest_port(self, guest_port):
        """Sets the guest_port of this HypervisorObject.


        :param guest_port: The guest_port of this HypervisorObject.  # noqa: E501
        :type: str
        """

        self._guest_port = guest_port

    @property
    def guest_rx_bytes(self):
        """Gets the guest_rx_bytes of this HypervisorObject.  # noqa: E501


        :return: The guest_rx_bytes of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_rx_bytes

    @guest_rx_bytes.setter
    def guest_rx_bytes(self, guest_rx_bytes):
        """Sets the guest_rx_bytes of this HypervisorObject.


        :param guest_rx_bytes: The guest_rx_bytes of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_rx_bytes = guest_rx_bytes

    @property
    def guest_rx_drop(self):
        """Gets the guest_rx_drop of this HypervisorObject.  # noqa: E501


        :return: The guest_rx_drop of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_rx_drop

    @guest_rx_drop.setter
    def guest_rx_drop(self, guest_rx_drop):
        """Sets the guest_rx_drop of this HypervisorObject.


        :param guest_rx_drop: The guest_rx_drop of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_rx_drop = guest_rx_drop

    @property
    def guest_rx_errors(self):
        """Gets the guest_rx_errors of this HypervisorObject.  # noqa: E501


        :return: The guest_rx_errors of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_rx_errors

    @guest_rx_errors.setter
    def guest_rx_errors(self, guest_rx_errors):
        """Sets the guest_rx_errors of this HypervisorObject.


        :param guest_rx_errors: The guest_rx_errors of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_rx_errors = guest_rx_errors

    @property
    def guest_rx_frame(self):
        """Gets the guest_rx_frame of this HypervisorObject.  # noqa: E501


        :return: The guest_rx_frame of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_rx_frame

    @guest_rx_frame.setter
    def guest_rx_frame(self, guest_rx_frame):
        """Sets the guest_rx_frame of this HypervisorObject.


        :param guest_rx_frame: The guest_rx_frame of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_rx_frame = guest_rx_frame

    @property
    def guest_rx_multicast(self):
        """Gets the guest_rx_multicast of this HypervisorObject.  # noqa: E501


        :return: The guest_rx_multicast of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_rx_multicast

    @guest_rx_multicast.setter
    def guest_rx_multicast(self, guest_rx_multicast):
        """Sets the guest_rx_multicast of this HypervisorObject.


        :param guest_rx_multicast: The guest_rx_multicast of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_rx_multicast = guest_rx_multicast

    @property
    def guest_rx_packets(self):
        """Gets the guest_rx_packets of this HypervisorObject.  # noqa: E501


        :return: The guest_rx_packets of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_rx_packets

    @guest_rx_packets.setter
    def guest_rx_packets(self, guest_rx_packets):
        """Sets the guest_rx_packets of this HypervisorObject.


        :param guest_rx_packets: The guest_rx_packets of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_rx_packets = guest_rx_packets

    @property
    def guest_tx_bytes(self):
        """Gets the guest_tx_bytes of this HypervisorObject.  # noqa: E501


        :return: The guest_tx_bytes of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_tx_bytes

    @guest_tx_bytes.setter
    def guest_tx_bytes(self, guest_tx_bytes):
        """Sets the guest_tx_bytes of this HypervisorObject.


        :param guest_tx_bytes: The guest_tx_bytes of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_tx_bytes = guest_tx_bytes

    @property
    def guest_tx_carrier(self):
        """Gets the guest_tx_carrier of this HypervisorObject.  # noqa: E501


        :return: The guest_tx_carrier of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_tx_carrier

    @guest_tx_carrier.setter
    def guest_tx_carrier(self, guest_tx_carrier):
        """Sets the guest_tx_carrier of this HypervisorObject.


        :param guest_tx_carrier: The guest_tx_carrier of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_tx_carrier = guest_tx_carrier

    @property
    def guest_tx_drop(self):
        """Gets the guest_tx_drop of this HypervisorObject.  # noqa: E501


        :return: The guest_tx_drop of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_tx_drop

    @guest_tx_drop.setter
    def guest_tx_drop(self, guest_tx_drop):
        """Sets the guest_tx_drop of this HypervisorObject.


        :param guest_tx_drop: The guest_tx_drop of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_tx_drop = guest_tx_drop

    @property
    def guest_tx_errors(self):
        """Gets the guest_tx_errors of this HypervisorObject.  # noqa: E501


        :return: The guest_tx_errors of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_tx_errors

    @guest_tx_errors.setter
    def guest_tx_errors(self, guest_tx_errors):
        """Sets the guest_tx_errors of this HypervisorObject.


        :param guest_tx_errors: The guest_tx_errors of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_tx_errors = guest_tx_errors

    @property
    def guest_tx_packets(self):
        """Gets the guest_tx_packets of this HypervisorObject.  # noqa: E501


        :return: The guest_tx_packets of this HypervisorObject.  # noqa: E501
        :rtype: int
        """
        return self._guest_tx_packets

    @guest_tx_packets.setter
    def guest_tx_packets(self, guest_tx_packets):
        """Sets the guest_tx_packets of this HypervisorObject.


        :param guest_tx_packets: The guest_tx_packets of this HypervisorObject.  # noqa: E501
        :type: int
        """

        self._guest_tx_packets = guest_tx_packets

    @property
    def mac_address(self):
        """Gets the mac_address of this HypervisorObject.  # noqa: E501


        :return: The mac_address of this HypervisorObject.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this HypervisorObject.


        :param mac_address: The mac_address of this HypervisorObject.  # noqa: E501
        :type: str
        """
        if mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")  # noqa: E501

        self._mac_address = mac_address

    @property
    def port(self):
        """Gets the port of this HypervisorObject.  # noqa: E501


        :return: The port of this HypervisorObject.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HypervisorObject.


        :param port: The port of this HypervisorObject.  # noqa: E501
        :type: str
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HypervisorObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HypervisorObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
