# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HostBgpNeighborObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'application': 'str',
        'device_address': 'str',
        'device_name': 'str',
        'local_as': 'int',
        'peer_as': 'int'
    }

    attribute_map = {
        'address': 'address',
        'application': 'application',
        'device_address': 'device_address',
        'device_name': 'device_name',
        'local_as': 'local_as',
        'peer_as': 'peer_as'
    }

    def __init__(self, address=None, application=None, device_address=None, device_name=None, local_as=None, peer_as=None):  # noqa: E501
        """HostBgpNeighborObject - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._application = None
        self._device_address = None
        self._device_name = None
        self._local_as = None
        self._peer_as = None
        self.discriminator = None

        self.address = address
        self.application = application
        self.device_address = device_address
        self.device_name = device_name
        self.local_as = local_as
        self.peer_as = peer_as

    @property
    def address(self):
        """Gets the address of this HostBgpNeighborObject.  # noqa: E501

        Host IP address for BGP session  # noqa: E501

        :return: The address of this HostBgpNeighborObject.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this HostBgpNeighborObject.

        Host IP address for BGP session  # noqa: E501

        :param address: The address of this HostBgpNeighborObject.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def application(self):
        """Gets the application of this HostBgpNeighborObject.  # noqa: E501

        Application name  # noqa: E501

        :return: The application of this HostBgpNeighborObject.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this HostBgpNeighborObject.

        Application name  # noqa: E501

        :param application: The application of this HostBgpNeighborObject.  # noqa: E501
        :type: str
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")  # noqa: E501

        self._application = application

    @property
    def device_address(self):
        """Gets the device_address of this HostBgpNeighborObject.  # noqa: E501

        Device IP address for BGP session  # noqa: E501

        :return: The device_address of this HostBgpNeighborObject.  # noqa: E501
        :rtype: str
        """
        return self._device_address

    @device_address.setter
    def device_address(self, device_address):
        """Sets the device_address of this HostBgpNeighborObject.

        Device IP address for BGP session  # noqa: E501

        :param device_address: The device_address of this HostBgpNeighborObject.  # noqa: E501
        :type: str
        """
        if device_address is None:
            raise ValueError("Invalid value for `device_address`, must not be `None`")  # noqa: E501

        self._device_address = device_address

    @property
    def device_name(self):
        """Gets the device_name of this HostBgpNeighborObject.  # noqa: E501

        Device name  # noqa: E501

        :return: The device_name of this HostBgpNeighborObject.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this HostBgpNeighborObject.

        Device name  # noqa: E501

        :param device_name: The device_name of this HostBgpNeighborObject.  # noqa: E501
        :type: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")  # noqa: E501

        self._device_name = device_name

    @property
    def local_as(self):
        """Gets the local_as of this HostBgpNeighborObject.  # noqa: E501

        Host AS  # noqa: E501

        :return: The local_as of this HostBgpNeighborObject.  # noqa: E501
        :rtype: int
        """
        return self._local_as

    @local_as.setter
    def local_as(self, local_as):
        """Sets the local_as of this HostBgpNeighborObject.

        Host AS  # noqa: E501

        :param local_as: The local_as of this HostBgpNeighborObject.  # noqa: E501
        :type: int
        """
        if local_as is None:
            raise ValueError("Invalid value for `local_as`, must not be `None`")  # noqa: E501

        self._local_as = local_as

    @property
    def peer_as(self):
        """Gets the peer_as of this HostBgpNeighborObject.  # noqa: E501

        Peer AS  # noqa: E501

        :return: The peer_as of this HostBgpNeighborObject.  # noqa: E501
        :rtype: int
        """
        return self._peer_as

    @peer_as.setter
    def peer_as(self, peer_as):
        """Sets the peer_as of this HostBgpNeighborObject.

        Peer AS  # noqa: E501

        :param peer_as: The peer_as of this HostBgpNeighborObject.  # noqa: E501
        :type: int
        """
        if peer_as is None:
            raise ValueError("Invalid value for `peer_as`, must not be `None`")  # noqa: E501

        self._peer_as = peer_as

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostBgpNeighborObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostBgpNeighborObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
