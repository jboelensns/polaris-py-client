# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GtmWideIpAliasConfigObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'domain': 'str',
        'is_add': 'bool',
        'is_delete': 'bool'
    }

    attribute_map = {
        'alias': 'alias',
        'domain': 'domain',
        'is_add': 'is_add',
        'is_delete': 'is_delete'
    }

    def __init__(self, alias=None, domain=None, is_add=None, is_delete=None):  # noqa: E501
        """GtmWideIpAliasConfigObject - a model defined in Swagger"""  # noqa: E501

        self._alias = None
        self._domain = None
        self._is_add = None
        self._is_delete = None
        self.discriminator = None

        self.alias = alias
        self.domain = domain
        self.is_add = is_add
        self.is_delete = is_delete

    @property
    def alias(self):
        """Gets the alias of this GtmWideIpAliasConfigObject.  # noqa: E501


        :return: The alias of this GtmWideIpAliasConfigObject.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this GtmWideIpAliasConfigObject.


        :param alias: The alias of this GtmWideIpAliasConfigObject.  # noqa: E501
        :type: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def domain(self):
        """Gets the domain of this GtmWideIpAliasConfigObject.  # noqa: E501


        :return: The domain of this GtmWideIpAliasConfigObject.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this GtmWideIpAliasConfigObject.


        :param domain: The domain of this GtmWideIpAliasConfigObject.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def is_add(self):
        """Gets the is_add of this GtmWideIpAliasConfigObject.  # noqa: E501


        :return: The is_add of this GtmWideIpAliasConfigObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_add

    @is_add.setter
    def is_add(self, is_add):
        """Sets the is_add of this GtmWideIpAliasConfigObject.


        :param is_add: The is_add of this GtmWideIpAliasConfigObject.  # noqa: E501
        :type: bool
        """
        if is_add is None:
            raise ValueError("Invalid value for `is_add`, must not be `None`")  # noqa: E501

        self._is_add = is_add

    @property
    def is_delete(self):
        """Gets the is_delete of this GtmWideIpAliasConfigObject.  # noqa: E501


        :return: The is_delete of this GtmWideIpAliasConfigObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_delete

    @is_delete.setter
    def is_delete(self, is_delete):
        """Sets the is_delete of this GtmWideIpAliasConfigObject.


        :param is_delete: The is_delete of this GtmWideIpAliasConfigObject.  # noqa: E501
        :type: bool
        """
        if is_delete is None:
            raise ValueError("Invalid value for `is_delete`, must not be `None`")  # noqa: E501

        self._is_delete = is_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GtmWideIpAliasConfigObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GtmWideIpAliasConfigObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
