# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemImageBootHistoryObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_name': 'str',
        'mac_addresses': 'list[object]',
        'system_serial': 'str',
        'system_uuid': 'str'
    }

    attribute_map = {
        'device_name': 'device_name',
        'mac_addresses': 'mac_addresses',
        'system_serial': 'system_serial',
        'system_uuid': 'system_uuid'
    }

    def __init__(self, device_name=None, mac_addresses=None, system_serial=None, system_uuid=None):  # noqa: E501
        """SystemImageBootHistoryObject - a model defined in Swagger"""  # noqa: E501

        self._device_name = None
        self._mac_addresses = None
        self._system_serial = None
        self._system_uuid = None
        self.discriminator = None

        if device_name is not None:
            self.device_name = device_name
        self.mac_addresses = mac_addresses
        self.system_serial = system_serial
        self.system_uuid = system_uuid

    @property
    def device_name(self):
        """Gets the device_name of this SystemImageBootHistoryObject.  # noqa: E501


        :return: The device_name of this SystemImageBootHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this SystemImageBootHistoryObject.


        :param device_name: The device_name of this SystemImageBootHistoryObject.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def mac_addresses(self):
        """Gets the mac_addresses of this SystemImageBootHistoryObject.  # noqa: E501


        :return: The mac_addresses of this SystemImageBootHistoryObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._mac_addresses

    @mac_addresses.setter
    def mac_addresses(self, mac_addresses):
        """Sets the mac_addresses of this SystemImageBootHistoryObject.


        :param mac_addresses: The mac_addresses of this SystemImageBootHistoryObject.  # noqa: E501
        :type: list[object]
        """
        if mac_addresses is None:
            raise ValueError("Invalid value for `mac_addresses`, must not be `None`")  # noqa: E501

        self._mac_addresses = mac_addresses

    @property
    def system_serial(self):
        """Gets the system_serial of this SystemImageBootHistoryObject.  # noqa: E501


        :return: The system_serial of this SystemImageBootHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._system_serial

    @system_serial.setter
    def system_serial(self, system_serial):
        """Sets the system_serial of this SystemImageBootHistoryObject.


        :param system_serial: The system_serial of this SystemImageBootHistoryObject.  # noqa: E501
        :type: str
        """
        if system_serial is None:
            raise ValueError("Invalid value for `system_serial`, must not be `None`")  # noqa: E501

        self._system_serial = system_serial

    @property
    def system_uuid(self):
        """Gets the system_uuid of this SystemImageBootHistoryObject.  # noqa: E501


        :return: The system_uuid of this SystemImageBootHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._system_uuid

    @system_uuid.setter
    def system_uuid(self, system_uuid):
        """Sets the system_uuid of this SystemImageBootHistoryObject.


        :param system_uuid: The system_uuid of this SystemImageBootHistoryObject.  # noqa: E501
        :type: str
        """
        if system_uuid is None:
            raise ValueError("Invalid value for `system_uuid`, must not be `None`")  # noqa: E501

        self._system_uuid = system_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemImageBootHistoryObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemImageBootHistoryObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
