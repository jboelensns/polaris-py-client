# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiHistoryObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_headers': 'str',
        'client_payload': 'str',
        'client_user_agent': 'str',
        'created_at': 'str',
        'duration': 'int',
        'http_code': 'int',
        'http_method': 'str',
        'id': 'str',
        'ip_address': 'str',
        'is_error_client': 'bool',
        'is_error_server': 'bool',
        'is_success': 'bool',
        'server_headers': 'str',
        'server_payload': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'client_headers': 'client_headers',
        'client_payload': 'client_payload',
        'client_user_agent': 'client_user_agent',
        'created_at': 'created_at',
        'duration': 'duration',
        'http_code': 'http_code',
        'http_method': 'http_method',
        'id': 'id',
        'ip_address': 'ip_address',
        'is_error_client': 'is_error_client',
        'is_error_server': 'is_error_server',
        'is_success': 'is_success',
        'server_headers': 'server_headers',
        'server_payload': 'server_payload',
        'uri': 'uri'
    }

    def __init__(self, client_headers=None, client_payload=None, client_user_agent=None, created_at=None, duration=None, http_code=None, http_method=None, id=None, ip_address=None, is_error_client=None, is_error_server=None, is_success=None, server_headers=None, server_payload=None, uri=None):  # noqa: E501
        """ApiHistoryObject - a model defined in Swagger"""  # noqa: E501

        self._client_headers = None
        self._client_payload = None
        self._client_user_agent = None
        self._created_at = None
        self._duration = None
        self._http_code = None
        self._http_method = None
        self._id = None
        self._ip_address = None
        self._is_error_client = None
        self._is_error_server = None
        self._is_success = None
        self._server_headers = None
        self._server_payload = None
        self._uri = None
        self.discriminator = None

        if client_headers is not None:
            self.client_headers = client_headers
        if client_payload is not None:
            self.client_payload = client_payload
        if client_user_agent is not None:
            self.client_user_agent = client_user_agent
        if created_at is not None:
            self.created_at = created_at
        if duration is not None:
            self.duration = duration
        if http_code is not None:
            self.http_code = http_code
        if http_method is not None:
            self.http_method = http_method
        if id is not None:
            self.id = id
        if ip_address is not None:
            self.ip_address = ip_address
        if is_error_client is not None:
            self.is_error_client = is_error_client
        if is_error_server is not None:
            self.is_error_server = is_error_server
        if is_success is not None:
            self.is_success = is_success
        if server_headers is not None:
            self.server_headers = server_headers
        if server_payload is not None:
            self.server_payload = server_payload
        if uri is not None:
            self.uri = uri

    @property
    def client_headers(self):
        """Gets the client_headers of this ApiHistoryObject.  # noqa: E501


        :return: The client_headers of this ApiHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._client_headers

    @client_headers.setter
    def client_headers(self, client_headers):
        """Sets the client_headers of this ApiHistoryObject.


        :param client_headers: The client_headers of this ApiHistoryObject.  # noqa: E501
        :type: str
        """

        self._client_headers = client_headers

    @property
    def client_payload(self):
        """Gets the client_payload of this ApiHistoryObject.  # noqa: E501


        :return: The client_payload of this ApiHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._client_payload

    @client_payload.setter
    def client_payload(self, client_payload):
        """Sets the client_payload of this ApiHistoryObject.


        :param client_payload: The client_payload of this ApiHistoryObject.  # noqa: E501
        :type: str
        """

        self._client_payload = client_payload

    @property
    def client_user_agent(self):
        """Gets the client_user_agent of this ApiHistoryObject.  # noqa: E501


        :return: The client_user_agent of this ApiHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._client_user_agent

    @client_user_agent.setter
    def client_user_agent(self, client_user_agent):
        """Sets the client_user_agent of this ApiHistoryObject.


        :param client_user_agent: The client_user_agent of this ApiHistoryObject.  # noqa: E501
        :type: str
        """

        self._client_user_agent = client_user_agent

    @property
    def created_at(self):
        """Gets the created_at of this ApiHistoryObject.  # noqa: E501


        :return: The created_at of this ApiHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApiHistoryObject.


        :param created_at: The created_at of this ApiHistoryObject.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def duration(self):
        """Gets the duration of this ApiHistoryObject.  # noqa: E501


        :return: The duration of this ApiHistoryObject.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ApiHistoryObject.


        :param duration: The duration of this ApiHistoryObject.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def http_code(self):
        """Gets the http_code of this ApiHistoryObject.  # noqa: E501


        :return: The http_code of this ApiHistoryObject.  # noqa: E501
        :rtype: int
        """
        return self._http_code

    @http_code.setter
    def http_code(self, http_code):
        """Sets the http_code of this ApiHistoryObject.


        :param http_code: The http_code of this ApiHistoryObject.  # noqa: E501
        :type: int
        """

        self._http_code = http_code

    @property
    def http_method(self):
        """Gets the http_method of this ApiHistoryObject.  # noqa: E501


        :return: The http_method of this ApiHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this ApiHistoryObject.


        :param http_method: The http_method of this ApiHistoryObject.  # noqa: E501
        :type: str
        """

        self._http_method = http_method

    @property
    def id(self):
        """Gets the id of this ApiHistoryObject.  # noqa: E501


        :return: The id of this ApiHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiHistoryObject.


        :param id: The id of this ApiHistoryObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this ApiHistoryObject.  # noqa: E501


        :return: The ip_address of this ApiHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ApiHistoryObject.


        :param ip_address: The ip_address of this ApiHistoryObject.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def is_error_client(self):
        """Gets the is_error_client of this ApiHistoryObject.  # noqa: E501


        :return: The is_error_client of this ApiHistoryObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_error_client

    @is_error_client.setter
    def is_error_client(self, is_error_client):
        """Sets the is_error_client of this ApiHistoryObject.


        :param is_error_client: The is_error_client of this ApiHistoryObject.  # noqa: E501
        :type: bool
        """

        self._is_error_client = is_error_client

    @property
    def is_error_server(self):
        """Gets the is_error_server of this ApiHistoryObject.  # noqa: E501


        :return: The is_error_server of this ApiHistoryObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_error_server

    @is_error_server.setter
    def is_error_server(self, is_error_server):
        """Sets the is_error_server of this ApiHistoryObject.


        :param is_error_server: The is_error_server of this ApiHistoryObject.  # noqa: E501
        :type: bool
        """

        self._is_error_server = is_error_server

    @property
    def is_success(self):
        """Gets the is_success of this ApiHistoryObject.  # noqa: E501


        :return: The is_success of this ApiHistoryObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this ApiHistoryObject.


        :param is_success: The is_success of this ApiHistoryObject.  # noqa: E501
        :type: bool
        """

        self._is_success = is_success

    @property
    def server_headers(self):
        """Gets the server_headers of this ApiHistoryObject.  # noqa: E501


        :return: The server_headers of this ApiHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._server_headers

    @server_headers.setter
    def server_headers(self, server_headers):
        """Sets the server_headers of this ApiHistoryObject.


        :param server_headers: The server_headers of this ApiHistoryObject.  # noqa: E501
        :type: str
        """

        self._server_headers = server_headers

    @property
    def server_payload(self):
        """Gets the server_payload of this ApiHistoryObject.  # noqa: E501


        :return: The server_payload of this ApiHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._server_payload

    @server_payload.setter
    def server_payload(self, server_payload):
        """Sets the server_payload of this ApiHistoryObject.


        :param server_payload: The server_payload of this ApiHistoryObject.  # noqa: E501
        :type: str
        """

        self._server_payload = server_payload

    @property
    def uri(self):
        """Gets the uri of this ApiHistoryObject.  # noqa: E501


        :return: The uri of this ApiHistoryObject.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ApiHistoryObject.


        :param uri: The uri of this ApiHistoryObject.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiHistoryObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiHistoryObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
