# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceValidateObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_name': 'str',
        'errors': 'list[object]',
        'success': 'list[object]',
        'validate_name': 'str'
    }

    attribute_map = {
        'device_name': 'device_name',
        'errors': 'errors',
        'success': 'success',
        'validate_name': 'validate_name'
    }

    def __init__(self, device_name=None, errors=None, success=None, validate_name=None):  # noqa: E501
        """DeviceValidateObject - a model defined in Swagger"""  # noqa: E501

        self._device_name = None
        self._errors = None
        self._success = None
        self._validate_name = None
        self.discriminator = None

        if device_name is not None:
            self.device_name = device_name
        if errors is not None:
            self.errors = errors
        if success is not None:
            self.success = success
        if validate_name is not None:
            self.validate_name = validate_name

    @property
    def device_name(self):
        """Gets the device_name of this DeviceValidateObject.  # noqa: E501


        :return: The device_name of this DeviceValidateObject.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DeviceValidateObject.


        :param device_name: The device_name of this DeviceValidateObject.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def errors(self):
        """Gets the errors of this DeviceValidateObject.  # noqa: E501

        metadata from real-time validation  # noqa: E501

        :return: The errors of this DeviceValidateObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this DeviceValidateObject.

        metadata from real-time validation  # noqa: E501

        :param errors: The errors of this DeviceValidateObject.  # noqa: E501
        :type: list[object]
        """

        self._errors = errors

    @property
    def success(self):
        """Gets the success of this DeviceValidateObject.  # noqa: E501

        metadata from real-time validation  # noqa: E501

        :return: The success of this DeviceValidateObject.  # noqa: E501
        :rtype: list[object]
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this DeviceValidateObject.

        metadata from real-time validation  # noqa: E501

        :param success: The success of this DeviceValidateObject.  # noqa: E501
        :type: list[object]
        """

        self._success = success

    @property
    def validate_name(self):
        """Gets the validate_name of this DeviceValidateObject.  # noqa: E501


        :return: The validate_name of this DeviceValidateObject.  # noqa: E501
        :rtype: str
        """
        return self._validate_name

    @validate_name.setter
    def validate_name(self, validate_name):
        """Sets the validate_name of this DeviceValidateObject.


        :param validate_name: The validate_name of this DeviceValidateObject.  # noqa: E501
        :type: str
        """

        self._validate_name = validate_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceValidateObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceValidateObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
