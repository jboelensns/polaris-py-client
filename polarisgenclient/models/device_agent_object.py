# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceAgentObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_type': 'str',
        'is_enabled': 'bool',
        'model_name': 'str',
        'os_version': 'str',
        'pop_name': 'str',
        'serial_number': 'str'
    }

    attribute_map = {
        'device_type': 'device_type',
        'is_enabled': 'is_enabled',
        'model_name': 'model_name',
        'os_version': 'os_version',
        'pop_name': 'pop_name',
        'serial_number': 'serial_number'
    }

    def __init__(self, device_type=None, is_enabled=None, model_name=None, os_version=None, pop_name=None, serial_number=None):  # noqa: E501
        """DeviceAgentObject - a model defined in Swagger"""  # noqa: E501

        self._device_type = None
        self._is_enabled = None
        self._model_name = None
        self._os_version = None
        self._pop_name = None
        self._serial_number = None
        self.discriminator = None

        self.device_type = device_type
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if model_name is not None:
            self.model_name = model_name
        self.os_version = os_version
        self.pop_name = pop_name
        if serial_number is not None:
            self.serial_number = serial_number

    @property
    def device_type(self):
        """Gets the device_type of this DeviceAgentObject.  # noqa: E501


        :return: The device_type of this DeviceAgentObject.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceAgentObject.


        :param device_type: The device_type of this DeviceAgentObject.  # noqa: E501
        :type: str
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")  # noqa: E501

        self._device_type = device_type

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DeviceAgentObject.  # noqa: E501


        :return: The is_enabled of this DeviceAgentObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DeviceAgentObject.


        :param is_enabled: The is_enabled of this DeviceAgentObject.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def model_name(self):
        """Gets the model_name of this DeviceAgentObject.  # noqa: E501


        :return: The model_name of this DeviceAgentObject.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DeviceAgentObject.


        :param model_name: The model_name of this DeviceAgentObject.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def os_version(self):
        """Gets the os_version of this DeviceAgentObject.  # noqa: E501


        :return: The os_version of this DeviceAgentObject.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this DeviceAgentObject.


        :param os_version: The os_version of this DeviceAgentObject.  # noqa: E501
        :type: str
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")  # noqa: E501

        self._os_version = os_version

    @property
    def pop_name(self):
        """Gets the pop_name of this DeviceAgentObject.  # noqa: E501


        :return: The pop_name of this DeviceAgentObject.  # noqa: E501
        :rtype: str
        """
        return self._pop_name

    @pop_name.setter
    def pop_name(self, pop_name):
        """Sets the pop_name of this DeviceAgentObject.


        :param pop_name: The pop_name of this DeviceAgentObject.  # noqa: E501
        :type: str
        """
        if pop_name is None:
            raise ValueError("Invalid value for `pop_name`, must not be `None`")  # noqa: E501

        self._pop_name = pop_name

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceAgentObject.  # noqa: E501


        :return: The serial_number of this DeviceAgentObject.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceAgentObject.


        :param serial_number: The serial_number of this DeviceAgentObject.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceAgentObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceAgentObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
