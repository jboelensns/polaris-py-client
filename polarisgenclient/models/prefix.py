# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Prefix(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added': 'str',
        'comment': 'str',
        'description': 'str',
        'display': 'bool',
        'display_prefix': 'str',
        'family': 'int',
        'id': 'int',
        'indent': 'int',
        'inherited_tags': 'list[str]',
        'is_private': 'bool',
        'last_modified': 'str',
        'node': 'str',
        'prefix': 'str',
        'status': 'str',
        'tags': 'list[str]',
        'type': 'str',
        'used_addresses': 'int',
        'vlan': 'int'
    }

    attribute_map = {
        'added': 'added',
        'comment': 'comment',
        'description': 'description',
        'display': 'display',
        'display_prefix': 'display_prefix',
        'family': 'family',
        'id': 'id',
        'indent': 'indent',
        'inherited_tags': 'inherited_tags',
        'is_private': 'is_private',
        'last_modified': 'last_modified',
        'node': 'node',
        'prefix': 'prefix',
        'status': 'status',
        'tags': 'tags',
        'type': 'type',
        'used_addresses': 'used_addresses',
        'vlan': 'vlan'
    }

    def __init__(self, added=None, comment=None, description=None, display=None, display_prefix=None, family=None, id=None, indent=None, inherited_tags=None, is_private=None, last_modified=None, node=None, prefix=None, status=None, tags=None, type=None, used_addresses=None, vlan=None):  # noqa: E501
        """Prefix - a model defined in Swagger"""  # noqa: E501

        self._added = None
        self._comment = None
        self._description = None
        self._display = None
        self._display_prefix = None
        self._family = None
        self._id = None
        self._indent = None
        self._inherited_tags = None
        self._is_private = None
        self._last_modified = None
        self._node = None
        self._prefix = None
        self._status = None
        self._tags = None
        self._type = None
        self._used_addresses = None
        self._vlan = None
        self.discriminator = None

        if added is not None:
            self.added = added
        if comment is not None:
            self.comment = comment
        if description is not None:
            self.description = description
        if display is not None:
            self.display = display
        if display_prefix is not None:
            self.display_prefix = display_prefix
        if family is not None:
            self.family = family
        if id is not None:
            self.id = id
        if indent is not None:
            self.indent = indent
        if inherited_tags is not None:
            self.inherited_tags = inherited_tags
        if is_private is not None:
            self.is_private = is_private
        if last_modified is not None:
            self.last_modified = last_modified
        if node is not None:
            self.node = node
        if prefix is not None:
            self.prefix = prefix
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if type is not None:
            self.type = type
        if used_addresses is not None:
            self.used_addresses = used_addresses
        if vlan is not None:
            self.vlan = vlan

    @property
    def added(self):
        """Gets the added of this Prefix.  # noqa: E501


        :return: The added of this Prefix.  # noqa: E501
        :rtype: str
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this Prefix.


        :param added: The added of this Prefix.  # noqa: E501
        :type: str
        """

        self._added = added

    @property
    def comment(self):
        """Gets the comment of this Prefix.  # noqa: E501


        :return: The comment of this Prefix.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Prefix.


        :param comment: The comment of this Prefix.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def description(self):
        """Gets the description of this Prefix.  # noqa: E501


        :return: The description of this Prefix.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Prefix.


        :param description: The description of this Prefix.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display(self):
        """Gets the display of this Prefix.  # noqa: E501


        :return: The display of this Prefix.  # noqa: E501
        :rtype: bool
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Prefix.


        :param display: The display of this Prefix.  # noqa: E501
        :type: bool
        """

        self._display = display

    @property
    def display_prefix(self):
        """Gets the display_prefix of this Prefix.  # noqa: E501


        :return: The display_prefix of this Prefix.  # noqa: E501
        :rtype: str
        """
        return self._display_prefix

    @display_prefix.setter
    def display_prefix(self, display_prefix):
        """Sets the display_prefix of this Prefix.


        :param display_prefix: The display_prefix of this Prefix.  # noqa: E501
        :type: str
        """

        self._display_prefix = display_prefix

    @property
    def family(self):
        """Gets the family of this Prefix.  # noqa: E501


        :return: The family of this Prefix.  # noqa: E501
        :rtype: int
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Prefix.


        :param family: The family of this Prefix.  # noqa: E501
        :type: int
        """

        self._family = family

    @property
    def id(self):
        """Gets the id of this Prefix.  # noqa: E501


        :return: The id of this Prefix.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Prefix.


        :param id: The id of this Prefix.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def indent(self):
        """Gets the indent of this Prefix.  # noqa: E501


        :return: The indent of this Prefix.  # noqa: E501
        :rtype: int
        """
        return self._indent

    @indent.setter
    def indent(self, indent):
        """Sets the indent of this Prefix.


        :param indent: The indent of this Prefix.  # noqa: E501
        :type: int
        """

        self._indent = indent

    @property
    def inherited_tags(self):
        """Gets the inherited_tags of this Prefix.  # noqa: E501


        :return: The inherited_tags of this Prefix.  # noqa: E501
        :rtype: list[str]
        """
        return self._inherited_tags

    @inherited_tags.setter
    def inherited_tags(self, inherited_tags):
        """Sets the inherited_tags of this Prefix.


        :param inherited_tags: The inherited_tags of this Prefix.  # noqa: E501
        :type: list[str]
        """

        self._inherited_tags = inherited_tags

    @property
    def is_private(self):
        """Gets the is_private of this Prefix.  # noqa: E501


        :return: The is_private of this Prefix.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Prefix.


        :param is_private: The is_private of this Prefix.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def last_modified(self):
        """Gets the last_modified of this Prefix.  # noqa: E501


        :return: The last_modified of this Prefix.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Prefix.


        :param last_modified: The last_modified of this Prefix.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def node(self):
        """Gets the node of this Prefix.  # noqa: E501


        :return: The node of this Prefix.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Prefix.


        :param node: The node of this Prefix.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def prefix(self):
        """Gets the prefix of this Prefix.  # noqa: E501


        :return: The prefix of this Prefix.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Prefix.


        :param prefix: The prefix of this Prefix.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def status(self):
        """Gets the status of this Prefix.  # noqa: E501


        :return: The status of this Prefix.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Prefix.


        :param status: The status of this Prefix.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Prefix.  # noqa: E501


        :return: The tags of this Prefix.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Prefix.


        :param tags: The tags of this Prefix.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this Prefix.  # noqa: E501


        :return: The type of this Prefix.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Prefix.


        :param type: The type of this Prefix.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def used_addresses(self):
        """Gets the used_addresses of this Prefix.  # noqa: E501


        :return: The used_addresses of this Prefix.  # noqa: E501
        :rtype: int
        """
        return self._used_addresses

    @used_addresses.setter
    def used_addresses(self, used_addresses):
        """Sets the used_addresses of this Prefix.


        :param used_addresses: The used_addresses of this Prefix.  # noqa: E501
        :type: int
        """

        self._used_addresses = used_addresses

    @property
    def vlan(self):
        """Gets the vlan of this Prefix.  # noqa: E501


        :return: The vlan of this Prefix.  # noqa: E501
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this Prefix.


        :param vlan: The vlan of this Prefix.  # noqa: E501
        :type: int
        """

        self._vlan = vlan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Prefix, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Prefix):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
