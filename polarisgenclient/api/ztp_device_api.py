# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from polarisgenclient.api_client import ApiClient


class ZtpDeviceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v01_ztp_device_get(self, serial_number, **kwargs):  # noqa: E501
        """ZtpDeviceRoute.get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_ztp_device_get(serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serial_number: ZTP device serial number (required)
        :param str uuid: ZTP device uuid
        :param str os_version_operating: ZTP device operating os version
        :param str os_version_intended: ZTP device intended os version
        :param str system_mac_address: ZTP device system mac address
        :param str model_name: ZTP device model name
        :param str management_ip_address: ZTP device management IP address
        :return: ZtpDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_ztp_device_get_with_http_info(serial_number, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_ztp_device_get_with_http_info(serial_number, **kwargs)  # noqa: E501
            return data

    def api_v01_ztp_device_get_with_http_info(self, serial_number, **kwargs):  # noqa: E501
        """ZtpDeviceRoute.get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_ztp_device_get_with_http_info(serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serial_number: ZTP device serial number (required)
        :param str uuid: ZTP device uuid
        :param str os_version_operating: ZTP device operating os version
        :param str os_version_intended: ZTP device intended os version
        :param str system_mac_address: ZTP device system mac address
        :param str model_name: ZTP device model name
        :param str management_ip_address: ZTP device management IP address
        :return: ZtpDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serial_number', 'uuid', 'os_version_operating', 'os_version_intended', 'system_mac_address', 'model_name', 'management_ip_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_ztp_device_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `api_v01_ztp_device_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serial_number' in params:
            path_params['serial_number'] = params['serial_number']  # noqa: E501

        query_params = []
        if 'uuid' in params:
            query_params.append(('uuid', params['uuid']))  # noqa: E501
        if 'os_version_operating' in params:
            query_params.append(('os_version_operating', params['os_version_operating']))  # noqa: E501
        if 'os_version_intended' in params:
            query_params.append(('os_version_intended', params['os_version_intended']))  # noqa: E501
        if 'system_mac_address' in params:
            query_params.append(('system_mac_address', params['system_mac_address']))  # noqa: E501
        if 'model_name' in params:
            query_params.append(('model_name', params['model_name']))  # noqa: E501
        if 'management_ip_address' in params:
            query_params.append(('management_ip_address', params['management_ip_address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/ztp/device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZtpDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v01_ztp_device_post(self, **kwargs):  # noqa: E501
        """ZtpDeviceRoute.post  # noqa: E501

        ZTP device registration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_ztp_device_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ZtpDevice device: ZTP device object
        :return: ZtpDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_ztp_device_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_ztp_device_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v01_ztp_device_post_with_http_info(self, **kwargs):  # noqa: E501
        """ZtpDeviceRoute.post  # noqa: E501

        ZTP device registration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_ztp_device_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ZtpDevice device: ZTP device object
        :return: ZtpDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_ztp_device_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device' in params:
            body_params = params['device']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/ztp/device', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZtpDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v01_ztp_device_serial_number_delete(self, serial_number, **kwargs):  # noqa: E501
        """ZtpDeviceRoute.delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_ztp_device_serial_number_delete(serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serial_number: ZTP device serial number (required)
        :return: ZtpDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_ztp_device_serial_number_delete_with_http_info(serial_number, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_ztp_device_serial_number_delete_with_http_info(serial_number, **kwargs)  # noqa: E501
            return data

    def api_v01_ztp_device_serial_number_delete_with_http_info(self, serial_number, **kwargs):  # noqa: E501
        """ZtpDeviceRoute.delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_ztp_device_serial_number_delete_with_http_info(serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serial_number: ZTP device serial number (required)
        :return: ZtpDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serial_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_ztp_device_serial_number_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `api_v01_ztp_device_serial_number_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serial_number' in params:
            path_params['serial_number'] = params['serial_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/ztp/device/{serial_number}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZtpDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v01_ztp_device_serial_number_get(self, serial_number, **kwargs):  # noqa: E501
        """ZtpDeviceRoute.get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_ztp_device_serial_number_get(serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serial_number: ZTP device serial number (required)
        :param str uuid: ZTP device uuid
        :param str os_version_operating: ZTP device operating os version
        :param str os_version_intended: ZTP device intended os version
        :param str system_mac_address: ZTP device system mac address
        :param str model_name: ZTP device model name
        :param str management_ip_address: ZTP device management IP address
        :return: ZtpDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_ztp_device_serial_number_get_with_http_info(serial_number, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_ztp_device_serial_number_get_with_http_info(serial_number, **kwargs)  # noqa: E501
            return data

    def api_v01_ztp_device_serial_number_get_with_http_info(self, serial_number, **kwargs):  # noqa: E501
        """ZtpDeviceRoute.get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_ztp_device_serial_number_get_with_http_info(serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serial_number: ZTP device serial number (required)
        :param str uuid: ZTP device uuid
        :param str os_version_operating: ZTP device operating os version
        :param str os_version_intended: ZTP device intended os version
        :param str system_mac_address: ZTP device system mac address
        :param str model_name: ZTP device model name
        :param str management_ip_address: ZTP device management IP address
        :return: ZtpDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serial_number', 'uuid', 'os_version_operating', 'os_version_intended', 'system_mac_address', 'model_name', 'management_ip_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_ztp_device_serial_number_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `api_v01_ztp_device_serial_number_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serial_number' in params:
            path_params['serial_number'] = params['serial_number']  # noqa: E501

        query_params = []
        if 'uuid' in params:
            query_params.append(('uuid', params['uuid']))  # noqa: E501
        if 'os_version_operating' in params:
            query_params.append(('os_version_operating', params['os_version_operating']))  # noqa: E501
        if 'os_version_intended' in params:
            query_params.append(('os_version_intended', params['os_version_intended']))  # noqa: E501
        if 'system_mac_address' in params:
            query_params.append(('system_mac_address', params['system_mac_address']))  # noqa: E501
        if 'model_name' in params:
            query_params.append(('model_name', params['model_name']))  # noqa: E501
        if 'management_ip_address' in params:
            query_params.append(('management_ip_address', params['management_ip_address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/ztp/device/{serial_number}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZtpDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v01_ztp_device_serial_number_put(self, serial_number, **kwargs):  # noqa: E501
        """ZtpDeviceRoute.post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_ztp_device_serial_number_put(serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serial_number: ZTP device serial number (required)
        :param ZtpDevice body: Dns object
        :return: ZtpDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_ztp_device_serial_number_put_with_http_info(serial_number, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_ztp_device_serial_number_put_with_http_info(serial_number, **kwargs)  # noqa: E501
            return data

    def api_v01_ztp_device_serial_number_put_with_http_info(self, serial_number, **kwargs):  # noqa: E501
        """ZtpDeviceRoute.post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_ztp_device_serial_number_put_with_http_info(serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serial_number: ZTP device serial number (required)
        :param ZtpDevice body: Dns object
        :return: ZtpDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serial_number', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_ztp_device_serial_number_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `api_v01_ztp_device_serial_number_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serial_number' in params:
            path_params['serial_number'] = params['serial_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/ztp/device/{serial_number}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ZtpDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
