# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from polarisgenclient.api_client import ApiClient


class HostBgpNeighborPrefixApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v01_host_bgp_neighbor_prefix_device_device_name_delete(self, device_name, prefix, id, neighbor_id, **kwargs):  # noqa: E501
        """HostBgpNeighborPrefixRoute.delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_host_bgp_neighbor_prefix_device_device_name_delete(device_name, prefix, id, neighbor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Device name FQDN (required)
        :param str prefix: IP Prefix (required)
        :param str id: HostBgpNeighborPrefix UUIDv1 id (required)
        :param str neighbor_id: HostBgpNeighbor UUIDv1 id (required)
        :return: HostBgpNeighborPrefixObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_host_bgp_neighbor_prefix_device_device_name_delete_with_http_info(device_name, prefix, id, neighbor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_host_bgp_neighbor_prefix_device_device_name_delete_with_http_info(device_name, prefix, id, neighbor_id, **kwargs)  # noqa: E501
            return data

    def api_v01_host_bgp_neighbor_prefix_device_device_name_delete_with_http_info(self, device_name, prefix, id, neighbor_id, **kwargs):  # noqa: E501
        """HostBgpNeighborPrefixRoute.delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_host_bgp_neighbor_prefix_device_device_name_delete_with_http_info(device_name, prefix, id, neighbor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Device name FQDN (required)
        :param str prefix: IP Prefix (required)
        :param str id: HostBgpNeighborPrefix UUIDv1 id (required)
        :param str neighbor_id: HostBgpNeighbor UUIDv1 id (required)
        :return: HostBgpNeighborPrefixObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'prefix', 'id', 'neighbor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_host_bgp_neighbor_prefix_device_device_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v01_host_bgp_neighbor_prefix_device_device_name_delete`")  # noqa: E501
        # verify the required parameter 'prefix' is set
        if ('prefix' not in params or
                params['prefix'] is None):
            raise ValueError("Missing the required parameter `prefix` when calling `api_v01_host_bgp_neighbor_prefix_device_device_name_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v01_host_bgp_neighbor_prefix_device_device_name_delete`")  # noqa: E501
        # verify the required parameter 'neighbor_id' is set
        if ('neighbor_id' not in params or
                params['neighbor_id'] is None):
            raise ValueError("Missing the required parameter `neighbor_id` when calling `api_v01_host_bgp_neighbor_prefix_device_device_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'neighbor_id' in params:
            query_params.append(('neighbor_id', params['neighbor_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/host/bgp/neighbor/prefix/device/{device_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostBgpNeighborPrefixObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v01_host_bgp_neighbor_prefix_device_device_name_put(self, device_name, application, **kwargs):  # noqa: E501
        """HostBgpNeighborPrefixRoute.put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_host_bgp_neighbor_prefix_device_device_name_put(device_name, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Device name (required)
        :param str application: Application name (required)
        :param HostBgpNeighborPrefixObject body: Host BGP Neighbor Prefix object.
        :return: HostBgpNeighborPrefixObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_host_bgp_neighbor_prefix_device_device_name_put_with_http_info(device_name, application, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_host_bgp_neighbor_prefix_device_device_name_put_with_http_info(device_name, application, **kwargs)  # noqa: E501
            return data

    def api_v01_host_bgp_neighbor_prefix_device_device_name_put_with_http_info(self, device_name, application, **kwargs):  # noqa: E501
        """HostBgpNeighborPrefixRoute.put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_host_bgp_neighbor_prefix_device_device_name_put_with_http_info(device_name, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Device name (required)
        :param str application: Application name (required)
        :param HostBgpNeighborPrefixObject body: Host BGP Neighbor Prefix object.
        :return: HostBgpNeighborPrefixObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'application', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_host_bgp_neighbor_prefix_device_device_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v01_host_bgp_neighbor_prefix_device_device_name_put`")  # noqa: E501
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `api_v01_host_bgp_neighbor_prefix_device_device_name_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501
        if 'application' in params:
            path_params['application'] = params['application']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/host/bgp/neighbor/prefix/device/{device_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostBgpNeighborPrefixObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v01_host_bgp_neighbor_prefix_get(self, device_name, **kwargs):  # noqa: E501
        """HostBgpNeighborPrefixRoute.get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_host_bgp_neighbor_prefix_get(device_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Device FQDN (required)
        :param str prefix: IPv4 or IPv6 prefix
        :return: list[HostBgpNeighborPrefixObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_host_bgp_neighbor_prefix_get_with_http_info(device_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_host_bgp_neighbor_prefix_get_with_http_info(device_name, **kwargs)  # noqa: E501
            return data

    def api_v01_host_bgp_neighbor_prefix_get_with_http_info(self, device_name, **kwargs):  # noqa: E501
        """HostBgpNeighborPrefixRoute.get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_host_bgp_neighbor_prefix_get_with_http_info(device_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Device FQDN (required)
        :param str prefix: IPv4 or IPv6 prefix
        :return: list[HostBgpNeighborPrefixObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'prefix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_host_bgp_neighbor_prefix_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v01_host_bgp_neighbor_prefix_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/host/bgp/neighbor/prefix', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HostBgpNeighborPrefixObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v01_host_bgp_neighbor_prefix_post(self, **kwargs):  # noqa: E501
        """HostBgpNeighborPrefixRoute.post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_host_bgp_neighbor_prefix_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HostBgpNeighborPrefixObject body: Host BGP Neighbor Prefix object
        :return: HostBgpNeighborPrefixObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_host_bgp_neighbor_prefix_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_host_bgp_neighbor_prefix_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v01_host_bgp_neighbor_prefix_post_with_http_info(self, **kwargs):  # noqa: E501
        """HostBgpNeighborPrefixRoute.post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_host_bgp_neighbor_prefix_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HostBgpNeighborPrefixObject body: Host BGP Neighbor Prefix object
        :return: HostBgpNeighborPrefixObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_host_bgp_neighbor_prefix_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/host/bgp/neighbor/prefix', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostBgpNeighborPrefixObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
