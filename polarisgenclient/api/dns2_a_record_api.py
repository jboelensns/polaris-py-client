# coding: utf-8

"""
    Polaris API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from polarisgenclient.api_client import ApiClient


class Dns2ARecordApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v01_dns2_record_zone_name_delete(self, zone, name, type, ip, **kwargs):  # noqa: E501
        """Dns2ARecordRoute.delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_dns2_record_zone_name_delete(zone, name, type, ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zone: zone for record (required)
        :param str name: name for fqdn (required)
        :param str type: type of record to delete (required)
        :param str ip: ip address (required)
        :return: DnsRecordObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_dns2_record_zone_name_delete_with_http_info(zone, name, type, ip, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_dns2_record_zone_name_delete_with_http_info(zone, name, type, ip, **kwargs)  # noqa: E501
            return data

    def api_v01_dns2_record_zone_name_delete_with_http_info(self, zone, name, type, ip, **kwargs):  # noqa: E501
        """Dns2ARecordRoute.delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_dns2_record_zone_name_delete_with_http_info(zone, name, type, ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zone: zone for record (required)
        :param str name: name for fqdn (required)
        :param str type: type of record to delete (required)
        :param str ip: ip address (required)
        :return: DnsRecordObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zone', 'name', 'type', 'ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_dns2_record_zone_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'zone' is set
        if ('zone' not in params or
                params['zone'] is None):
            raise ValueError("Missing the required parameter `zone` when calling `api_v01_dns2_record_zone_name_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v01_dns2_record_zone_name_delete`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v01_dns2_record_zone_name_delete`")  # noqa: E501
        # verify the required parameter 'ip' is set
        if ('ip' not in params or
                params['ip'] is None):
            raise ValueError("Missing the required parameter `ip` when calling `api_v01_dns2_record_zone_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'zone' in params:
            path_params['zone'] = params['zone']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'ip' in params:
            path_params['ip'] = params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/dns2/record/{zone}/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DnsRecordObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v01_dns2_record_zone_name_get(self, zone, name, **kwargs):  # noqa: E501
        """Dns2ARecordRoute.get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_dns2_record_zone_name_get(zone, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zone: fqdn (required)
        :param str name: name (required)
        :return: DnsRecordObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_dns2_record_zone_name_get_with_http_info(zone, name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_dns2_record_zone_name_get_with_http_info(zone, name, **kwargs)  # noqa: E501
            return data

    def api_v01_dns2_record_zone_name_get_with_http_info(self, zone, name, **kwargs):  # noqa: E501
        """Dns2ARecordRoute.get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_dns2_record_zone_name_get_with_http_info(zone, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zone: fqdn (required)
        :param str name: name (required)
        :return: DnsRecordObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zone', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_dns2_record_zone_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'zone' is set
        if ('zone' not in params or
                params['zone'] is None):
            raise ValueError("Missing the required parameter `zone` when calling `api_v01_dns2_record_zone_name_get`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v01_dns2_record_zone_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'zone' in params:
            path_params['zone'] = params['zone']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/dns2/record/{zone}/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DnsRecordObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v01_dns2_record_zone_name_type_ip_delete(self, zone, name, type, ip, **kwargs):  # noqa: E501
        """Dns2ARecordRoute.delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_dns2_record_zone_name_type_ip_delete(zone, name, type, ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zone: zone for record (required)
        :param str name: name for fqdn (required)
        :param str type: type of record to delete (required)
        :param str ip: ip address (required)
        :return: DnsRecordObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v01_dns2_record_zone_name_type_ip_delete_with_http_info(zone, name, type, ip, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v01_dns2_record_zone_name_type_ip_delete_with_http_info(zone, name, type, ip, **kwargs)  # noqa: E501
            return data

    def api_v01_dns2_record_zone_name_type_ip_delete_with_http_info(self, zone, name, type, ip, **kwargs):  # noqa: E501
        """Dns2ARecordRoute.delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v01_dns2_record_zone_name_type_ip_delete_with_http_info(zone, name, type, ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str zone: zone for record (required)
        :param str name: name for fqdn (required)
        :param str type: type of record to delete (required)
        :param str ip: ip address (required)
        :return: DnsRecordObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['zone', 'name', 'type', 'ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v01_dns2_record_zone_name_type_ip_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'zone' is set
        if ('zone' not in params or
                params['zone'] is None):
            raise ValueError("Missing the required parameter `zone` when calling `api_v01_dns2_record_zone_name_type_ip_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v01_dns2_record_zone_name_type_ip_delete`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v01_dns2_record_zone_name_type_ip_delete`")  # noqa: E501
        # verify the required parameter 'ip' is set
        if ('ip' not in params or
                params['ip'] is None):
            raise ValueError("Missing the required parameter `ip` when calling `api_v01_dns2_record_zone_name_type_ip_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'zone' in params:
            path_params['zone'] = params['zone']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'ip' in params:
            path_params['ip'] = params['ip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0.1/dns2/record/{zone}/{name}/{type}/{ip}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DnsRecordObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
